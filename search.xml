<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2024-1-25红星路互勉</title>
      <link href="/2024/01/29/2024-1-25%E7%BA%A2%E6%98%9F%E8%B7%AF%E4%BA%92%E5%8B%89/"/>
      <url>/2024/01/29/2024-1-25%E7%BA%A2%E6%98%9F%E8%B7%AF%E4%BA%92%E5%8B%89/</url>
      
        <content type="html"><![CDATA[<p>2024.1.25记录第一次互勉约拍，地点在红星路，路人阿姨说小姐姐坐在那像幅画一样</p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240129152330.jpg" alt="微信图片_20240129152330"></p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240129152455.jpg" alt="微信图片_20240129152455"></p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240129152501.jpg" alt="微信图片_20240129152501"></p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240129152508.jpg" alt="微信图片_20240129152508"></p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240129152514.jpg" alt="微信图片_20240129152514"></p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240129152521.jpg" alt="微信图片_20240129152521"></p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240129152526.jpg" alt="微信图片_20240129152526"></p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240129152535.jpg" alt="微信图片_20240129152535"></p>]]></content>
      
      
      <categories>
          
          <category> 摄影日记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2024-1-21城隍庙</title>
      <link href="/2024/01/21/2024-1-21%E5%9F%8E%E9%9A%8D%E5%BA%99/"/>
      <url>/2024/01/21/2024-1-21%E5%9F%8E%E9%9A%8D%E5%BA%99/</url>
      
        <content type="html"><![CDATA[<h3 id="城隍庙左咪咪右修勾"><a href="#城隍庙左咪咪右修勾" class="headerlink" title="城隍庙左咪咪右修勾"></a>城隍庙左咪咪右修勾</h3><hr><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_4726-1.jpg" alt="DSC_4726-1"></p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_4735-1.jpg" alt="DSC_4735-1"></p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_4678-1.jpg" alt="DSC_4678-1"></p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_4730-1.jpg" alt="DSC_4730-1"></p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_4669-1.jpg" alt="DSC_4669-1"></p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_4696-1.jpg" alt="DSC_4696-1"></p>]]></content>
      
      
      <categories>
          
          <category> 摄影日记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>FOC硬件日记（正在更新）</title>
      <link href="/2024/01/20/FOC%E7%A1%AC%E4%BB%B6%E6%97%A5%E8%AE%B0/"/>
      <url>/2024/01/20/FOC%E7%A1%AC%E4%BB%B6%E6%97%A5%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="1-20"><a href="#1-20" class="headerlink" title="1.20"></a>1.20</h1><p>硬件设计，参考STC的无感BLDC方案，但是主控更换为STM32，三相逆变器采用FD6288Q，使用mos桥方式支持大电流（考虑小电流drv8313方案，只支持2A电流，仍然需要加mos驱动，考虑成本选择FD6288Q）。考虑加入电流环，电流检测采用INA199A1DCKR。下图为三相逆变电路及电流检测：</p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240120234842699.png" alt="image-20240120234842699"></p><p>存在验证的问题：</p><p>问题1：FD6288官方手册外围电路中需要增加自举电阻，参考开源方案并没有加入自举电阻，</p><p>问题2：电流检测放在半桥的下桥接地，理论上放在哪儿无影响</p><p>问题3：电流检测压差采用分压电阻得到1.65V，参考STM32F103C的FOC方案设计，C系列无VREF</p><hr><p>单片机选型使用STM32F103ZET6（理论上做6路FOC电机都没问题，大炮打蚊子），最初选型考虑STM32G和STM32F4系列，最终由于价格和学习基础理论，采用ZET6（主要因为手头有剩的）。单片机VREF采用3.3V，可能会出现精度问题，暂不考虑。电源设计如下：</p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240120235458613.png" alt="image-20240120235458613"></p><p>电路中5V仅作为FD6288Q芯片供电，为了电路简单，使用AMS1117（手头有剩的），MCU和其他电路的3.3V区分，分别使用两个RT9013稳压。完整电路还包括显示，串口，交互按键，暂未完成。</p><h1 id="1-22"><a href="#1-22" class="headerlink" title="1.22"></a>1.22</h1><p>参考柠檬FOC项目，又看到开源博主说FD6288的最低供电为12V，但是看芯片手册输入电压为4~24V，原STC无感电路设计采用5V，电机高速长时间运行时，ams1117处于温热状态，考虑更换为buck电路：</p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240122230156017.png" alt="image-20240122230156017"></p><p>FD6288Q仍然使用5V供电。</p><h1 id="1-24"><a href="#1-24" class="headerlink" title="1.24"></a>1.24</h1><p>完成原理图设计和PCB大致布局，完善USB串口，交互按键和LED指示灯。完整原理图如下：</p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240124210149669.png" alt="image-20240124210149669"></p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240124210213483.png" alt="image-20240124210213483"></p><p>电机接口考虑使用铜皮开窗，使用香蕉头和电机连接，或直接焊接。</p>]]></content>
      
      
      <categories>
          
          <category> FOC学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux嵌入式4-tslib库函数</title>
      <link href="/2024/01/18/Linux%E5%B5%8C%E5%85%A5%E5%BC%8F4-tslib%E5%BA%93%E5%87%BD%E6%95%B0/"/>
      <url>/2024/01/18/Linux%E5%B5%8C%E5%85%A5%E5%BC%8F4-tslib%E5%BA%93%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="1、tslib简介"><a href="#1、tslib简介" class="headerlink" title="1、tslib简介"></a>1、tslib简介</h1><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240118215432029.png" alt="image-20240118215432029"></p><p>tslib是为触摸屏设备开发的linux应用层库函数，通过配置conf文件适配触摸屏信息，通过调用函数得到触摸屏的实时触摸点信息。tslib移植过程参考应用开发编程指南第18章。</p><h1 id="2、tslib库函数介绍"><a href="#2、tslib库函数介绍" class="headerlink" title="2、tslib库函数介绍"></a>2、tslib库函数介绍</h1><p>配置、打开触摸屏设备函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;tslib.h&quot;</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">dev_name: 设备节点</span></span><br><span class="line"><span class="comment">nonblock： 0为阻塞方法打开触摸屏设备，非0表示非阻塞</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">struct</span> tsdev *<span class="title function_">ts_open</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *dev_name, <span class="type">int</span> nonblock)</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">参数与上面相同，区别是，dev_name可以设置为NULL，函数会在配置文件读取设备节点</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">struct</span> tsdev *<span class="title function_">ts_setup</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *dev_name, <span class="type">int</span> nonblock)</span></span><br><span class="line"><span class="comment">//关闭触摸屏设备</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">ts_close</span><span class="params">(<span class="keyword">struct</span> tsdev *)</span>;</span><br><span class="line"><span class="comment">//配置触摸屏设备</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">ts_config</span><span class="params">(<span class="keyword">struct</span> tsdev *ts)</span></span><br><span class="line"><span class="comment">//获取触摸屏事件句柄    </span></span><br><span class="line"><span class="title function_">ts_fd</span><span class="params">(ts)</span></span><br></pre></td></tr></table></figure><hr><p>读取触摸屏数据函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">ts_read</span><span class="params">(<span class="keyword">struct</span> tsdev *ts, <span class="keyword">struct</span> ts_sample *samp, <span class="type">int</span> nr)</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">ts_read_mt</span><span class="params">(<span class="keyword">struct</span> tsdev *ts, <span class="keyword">struct</span> ts_sample_mt **samp, <span class="type">int</span> max_slots, <span class="type">int</span> nr)</span></span><br></pre></td></tr></table></figure><h1 id="3、tslib多点触摸测试："><a href="#3、tslib多点触摸测试：" class="headerlink" title="3、tslib多点触摸测试："></a>3、tslib多点触摸测试：</h1><p>tslib流程：</p><p>1、配置触摸屏</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ts = ts_setup(<span class="literal">NULL</span>,<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>2、读取触摸屏信息，计算最大触摸点数，申请触摸点信息数组</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="number">0</span> &gt; ioctl(ts_fd(ts), EVIOCGABS(ABS_MT_SLOT), &amp;info))&#123;</span><br><span class="line">        perror(<span class="string">&quot;ioctl error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//获取最大触摸点</span></span><br><span class="line">    max_slots = info.maximum + <span class="number">1</span> - info.minimum;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;max slots: %d\n&quot;</span>,max_slots);</span><br><span class="line"><span class="comment">//申请存储触摸点数组空间</span></span><br><span class="line">    samp = <span class="built_in">calloc</span>(max_slots, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> ts_sample_mt));</span><br></pre></td></tr></table></figure><p>3、读取触摸屏数据</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//读触摸屏数据</span></span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span>&gt;ts_read_mt(ts, &amp;samp, max_slots, <span class="number">1</span>))&#123;</span><br><span class="line">    perror(<span class="string">&quot;ts_read error&quot;</span>);</span><br><span class="line">    ts_close(ts);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、解算触摸屏坐标</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;poll.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/input.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;tslib.h&gt;</span></span></span><br><span class="line"><span class="comment">// 多点触摸实验</span></span><br><span class="line"><span class="comment">// /dev/input/event1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span>&#123;</span><br><span class="line">    <span class="comment">//tsdev是设备文件 tslib</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tsdev</span> *<span class="title">ts</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">//sample是具体坐标信息</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ts_sample_mt</span> *<span class="title">samp</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">input_absinfo</span> <span class="title">info</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ts_mt</span> *<span class="title">mt</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">int</span> max_slots;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> pressure[<span class="number">12</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="comment">//配置触摸屏</span></span><br><span class="line">    ts = ts_setup(<span class="literal">NULL</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">NULL</span>==ts)&#123;</span><br><span class="line">        perror(<span class="string">&quot;ts_setup error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//ts_fd获取触摸屏事件句柄，再获取触摸屏信息</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="number">0</span> &gt; ioctl(ts_fd(ts), EVIOCGABS(ABS_MT_SLOT), &amp;info))&#123;</span><br><span class="line">        perror(<span class="string">&quot;ioctl error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//获取最大触摸点</span></span><br><span class="line">    max_slots = info.maximum + <span class="number">1</span> - info.minimum;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;max slots: %d\n&quot;</span>,max_slots);</span><br><span class="line"><span class="comment">//申请存储触摸点数组空间</span></span><br><span class="line">    samp = <span class="built_in">calloc</span>(max_slots, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> ts_sample_mt));</span><br><span class="line">    <span class="keyword">for</span> (;;)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//读触摸屏数据</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="number">0</span>&gt;ts_read_mt(ts, &amp;samp, max_slots, <span class="number">1</span>))&#123;</span><br><span class="line">            perror(<span class="string">&quot;ts_read error&quot;</span>);</span><br><span class="line">            ts_close(ts);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; max_slots; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//触摸点状态发生改变</span></span><br><span class="line">            <span class="keyword">if</span>(samp[i].valid)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//判断压力是否大于0 是表示按下 否表示松开</span></span><br><span class="line">                <span class="keyword">if</span> (samp[i].pressure)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//上一次压力为0表示刚按下 否则表示移动</span></span><br><span class="line">                    <span class="keyword">if</span>(pressure[samp[i].slot]==<span class="number">0</span>)&#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;%d按下：x=%d y=%d\n&quot;</span>, samp[i].slot, samp[i].x, samp[i].y);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;%d移动：x=%d y=%d\n&quot;</span>, samp[i].slot, samp[i].x, samp[i].y);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;%d松开\n&quot;</span>, samp[i].slot);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//更新历史压力</span></span><br><span class="line">            pressure[samp[i].slot] = samp[i].pressure;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ts_close(ts);</span><br><span class="line">    <span class="built_in">free</span>(samp);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux嵌入式学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>虫子移动问题</title>
      <link href="/2024/01/16/%E8%99%AB%E5%AD%90%E7%A7%BB%E5%8A%A8%E9%97%AE%E9%A2%98/"/>
      <url>/2024/01/16/%E8%99%AB%E5%AD%90%E7%A7%BB%E5%8A%A8%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="虫子移动问题"><a href="#虫子移动问题" class="headerlink" title="虫子移动问题"></a>虫子移动问题</h1><h2 id="1、问题描述："><a href="#1、问题描述：" class="headerlink" title="1、问题描述："></a>1、问题描述：</h2><p>存在一个5行12列的表格，第一列有5只虫子，编号1，2，3，4，5；每只虫子的移动方向只能是向右、右上方、右下方三种方向；5只虫子进行移动操作后到达第二列，要求每一行都存在一只虫子，同样的要求，五只虫子要到达第12列，虫子每次移动操作对应着不同的权重矩阵相加，虫子从第1列到达第12列的过程存在很多种权重矩阵和，找出权重矩阵方差最小的路线。问题简化如下：</p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240116215034998.png" alt="image-20240116215034998"></p><h2 id="简化："><a href="#简化：" class="headerlink" title="简化："></a>简化：</h2><p>存在一个5*12的表格，第一列为1<del>5，每个数可以进行-1，不变，+1的操作，进入到下一列，要求进入到下一列的五个数范围还在1</del>5，且不能重复，每次操作对应不同的权重矩阵，求到第12列时，权重矩阵方差最小的移动方案。</p><h2 id="2、求解思路："><a href="#2、求解思路：" class="headerlink" title="2、求解思路："></a>2、求解思路：</h2><p>已知1<del>5个数字任意组合一共有5！（120）种方案，通过暴力破解验证得到每种组合按照题目要求移动一列都存在8种情况，这样可以知道一共有120*8种生成子集，可以通过查表法省去迭代的时间。先建立一个列表，一维空间为10000，查表下标计算为六进制，考虑一共有5个数，数字范围在1</del>5且不重复，<strong>使用六进制可以间接的描述出表的下标，存在的缺陷就是造成空间浪费，实际只有120个下标用到</strong>，二维空间为对应的8种情况序列。建表过程为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="comment"># 列出所有排列</span></span><br><span class="line">permutations = <span class="built_in">list</span>(itertools.permutations(numbers))</span><br><span class="line"><span class="comment"># 对每个排列进行操作，并计算结果</span></span><br><span class="line">results = <span class="built_in">set</span>()</span><br><span class="line"><span class="keyword">for</span> perm <span class="keyword">in</span> permutations:</span><br><span class="line">    result = <span class="built_in">sum</span>([perm[i] * (<span class="number">6</span>**(<span class="number">4</span>-i)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)])</span><br><span class="line">    results.add(result)</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> product</span><br><span class="line">operations = [-<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">initial_case = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">initial_operations = <span class="built_in">list</span>(product(operations, repeat=<span class="built_in">len</span>(initial_case)))</span><br><span class="line"><span class="comment"># 暴力破解得到每种情况移动后的子情况</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getdata</span>(<span class="params">initial_case </span>):</span><br><span class="line">    valid_initial_cases = []</span><br><span class="line">    <span class="keyword">for</span> ops <span class="keyword">in</span> initial_operations:</span><br><span class="line">        new_numbers = [n + op <span class="keyword">for</span> n, op <span class="keyword">in</span> <span class="built_in">zip</span>(initial_case, ops)]</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(<span class="built_in">set</span>(new_numbers)) == <span class="built_in">len</span>(new_numbers) <span class="keyword">and</span> <span class="built_in">all</span>(<span class="number">1</span> &lt;= num &lt;= <span class="number">5</span> <span class="keyword">for</span> num <span class="keyword">in</span> new_numbers):</span><br><span class="line">            valid_initial_cases.append(new_numbers)</span><br><span class="line">    <span class="keyword">return</span> valid_initial_cases</span><br><span class="line">table = [<span class="number">0</span>]*<span class="number">10000</span></span><br><span class="line"><span class="keyword">for</span> perm <span class="keyword">in</span> permutations:</span><br><span class="line">    table[<span class="built_in">sum</span>([perm[i] * (<span class="number">6</span>**(<span class="number">4</span>-i)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)])] = getdata(perm)</span><br></pre></td></tr></table></figure><p>这样在每次移动时只需要通过查表法得到子情况集，不需要再进行迭代求解，节约一定时间。建立查表法生成树结构来描述所有情况，在叶子节点可以求解当前路径的权重矩阵方差，记录最小的权重矩阵的值和移动路径。</p><h2 id="3、运行结果："><a href="#3、运行结果：" class="headerlink" title="3、运行结果："></a>3、运行结果：</h2><p>构建深度为12的树，且每个节点存在8个子节点，尽管使用查表法省去一定的时间，但是庞大的基数仍然时问题无法求解，最后优化下求解出深度为8时的最优路径：</p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/76e2d06a407a2f804d2c0f779d49c3c.png" alt="76e2d06a407a2f804d2c0f779d49c3c"></p><p>耗时3分钟，往后每增加一层，时间增加8倍，<strong>理论求解出12层的时间为8天，于是果断放弃！</strong></p><h2 id="4、程序源码："><a href="#4、程序源码：" class="headerlink" title="4、程序源码："></a>4、程序源码：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">from</span> copy <span class="keyword">import</span> deepcopy</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line">numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="comment"># 列出所有排列</span></span><br><span class="line">permutations = <span class="built_in">list</span>(itertools.permutations(numbers))</span><br><span class="line"><span class="comment"># 对每个排列进行操作，并计算结果</span></span><br><span class="line">results = <span class="built_in">set</span>()</span><br><span class="line"><span class="keyword">for</span> perm <span class="keyword">in</span> permutations:</span><br><span class="line">    result = <span class="built_in">sum</span>([perm[i] * (<span class="number">6</span>**(<span class="number">4</span>-i)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)])</span><br><span class="line">    results.add(result)</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> product</span><br><span class="line">operations = [-<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">initial_case = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">initial_operations = <span class="built_in">list</span>(product(operations, repeat=<span class="built_in">len</span>(initial_case)))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getdata</span>(<span class="params">initial_case </span>):</span><br><span class="line">    valid_initial_cases = []</span><br><span class="line">    <span class="keyword">for</span> ops <span class="keyword">in</span> initial_operations:</span><br><span class="line">        new_numbers = [n + op <span class="keyword">for</span> n, op <span class="keyword">in</span> <span class="built_in">zip</span>(initial_case, ops)]</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(<span class="built_in">set</span>(new_numbers)) == <span class="built_in">len</span>(new_numbers) <span class="keyword">and</span> <span class="built_in">all</span>(<span class="number">1</span> &lt;= num &lt;= <span class="number">5</span> <span class="keyword">for</span> num <span class="keyword">in</span> new_numbers):</span><br><span class="line">            valid_initial_cases.append(new_numbers)</span><br><span class="line">    <span class="keyword">return</span> valid_initial_cases</span><br><span class="line">table = [<span class="number">0</span>]*<span class="number">10000</span></span><br><span class="line"><span class="keyword">for</span> perm <span class="keyword">in</span> permutations:</span><br><span class="line">    table[<span class="built_in">sum</span>([perm[i] * (<span class="number">6</span>**(<span class="number">4</span>-i)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)])] = getdata(perm)</span><br><span class="line"></span><br><span class="line">initial_case = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="comment"># print(table[sum([initial_case[i] * (6**(4-i)) for i in range(5)])])</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;my_list.pkl&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    pickle.dump(table, file)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TreeNode</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, value</span>):</span><br><span class="line">        self.value = deepcopy(value)</span><br><span class="line">        self.children = []</span><br><span class="line"><span class="comment"># 创建树</span></span><br><span class="line">root = TreeNode(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># root.value.append(initial_case)</span></span><br><span class="line">root.value = [initial_case]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getNode</span>(<span class="params">initial_case, Node</span>):</span><br><span class="line">    <span class="keyword">for</span> numbers <span class="keyword">in</span> <span class="built_in">iter</span>(table[<span class="built_in">sum</span>([initial_case[i] * (<span class="number">6</span> ** (<span class="number">4</span> - i)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)])]):</span><br><span class="line">        Node.children.append(TreeNode(numbers))</span><br><span class="line">    <span class="keyword">return</span> Node.children</span><br><span class="line"></span><br><span class="line">start_time = time.time()</span><br><span class="line">dataa = np.load(<span class="string">&#x27;../../../../../../Documents/WeChat Files/wxid_fm5zrvq5j2an22/FileStorage/File/2024-01/value.npy&#x27;</span>)</span><br><span class="line">minfangcha = <span class="number">100000000</span></span><br><span class="line"><span class="built_in">print</span>(dataa.shape)</span><br><span class="line">save_result = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># for nums in root.value:</span></span><br><span class="line">Tree = getNode(root.value[<span class="number">0</span>], root)</span><br><span class="line"><span class="comment">#----------------第二维度</span></span><br><span class="line"><span class="keyword">for</span> children1 <span class="keyword">in</span> Tree:</span><br><span class="line">    Tree1 = getNode(children1.value, children1)</span><br><span class="line">    <span class="comment">#----------------第三维度</span></span><br><span class="line">    <span class="keyword">for</span> children2 <span class="keyword">in</span> Tree1:</span><br><span class="line">        Tree2 = getNode(children2.value, children2)</span><br><span class="line">        <span class="comment">#----------------第四维度</span></span><br><span class="line">        <span class="keyword">for</span> children3 <span class="keyword">in</span> Tree2:</span><br><span class="line">            Tree3 = getNode(children3.value, children3)</span><br><span class="line">            <span class="comment">#----------------第五维度</span></span><br><span class="line">            <span class="keyword">for</span> children4 <span class="keyword">in</span> Tree3:</span><br><span class="line">                Tree4 = getNode(children4.value, children4)</span><br><span class="line">                <span class="comment">#----------------第六维度</span></span><br><span class="line">                <span class="keyword">for</span> children5 <span class="keyword">in</span> Tree4:</span><br><span class="line">                    Tree5 = getNode(children5.value, children5)</span><br><span class="line">                    <span class="comment">#----------------第七维度</span></span><br><span class="line">                    <span class="keyword">for</span> children6 <span class="keyword">in</span> Tree5:</span><br><span class="line">                        Tree6 = getNode(children6.value, children6)</span><br><span class="line">                        <span class="keyword">for</span> children7 <span class="keyword">in</span> Tree6:</span><br><span class="line">                            result = []</span><br><span class="line"></span><br><span class="line">                            indices = [root.value[<span class="number">0</span>].index(num) <span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>)]</span><br><span class="line">                            result.append(indices)</span><br><span class="line">                            indices = [children1.value.index(num) <span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>)]</span><br><span class="line">                            result.append(indices)</span><br><span class="line">                            indices = [children2.value.index(num) <span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>)]</span><br><span class="line">                            result.append(indices)</span><br><span class="line">                            indices = [children3.value.index(num) <span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>)]</span><br><span class="line">                            result.append(indices)</span><br><span class="line">                            indices = [children4.value.index(num) <span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>)]</span><br><span class="line">                            result.append(indices)</span><br><span class="line">                            indices = [children5.value.index(num) <span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>)]</span><br><span class="line">                            result.append(indices)</span><br><span class="line">                            indices = [children6.value.index(num) <span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>)]</span><br><span class="line">                            result.append(indices)</span><br><span class="line">                            indices = [children7.value.index(num) <span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>)]</span><br><span class="line">                            result.append(indices)</span><br><span class="line">                            result = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">list</span>, <span class="built_in">zip</span>(*result)))</span><br><span class="line"></span><br><span class="line">                            bianliang1 = dataa[result[<span class="number">0</span>][<span class="number">0</span>]][<span class="number">0</span>] + dataa[result[<span class="number">0</span>][<span class="number">1</span>]][<span class="number">1</span>] + dataa[result[<span class="number">0</span>][<span class="number">2</span>]][<span class="number">2</span>] + \</span><br><span class="line">                                        dataa[result[<span class="number">0</span>][<span class="number">3</span>]][<span class="number">3</span>] + dataa[result[<span class="number">0</span>][<span class="number">4</span>]][<span class="number">4</span>] + dataa[result[<span class="number">0</span>][<span class="number">5</span>]][<span class="number">5</span>] + \</span><br><span class="line">                                        dataa[result[<span class="number">0</span>][<span class="number">6</span>]][<span class="number">6</span>] + dataa[result[<span class="number">0</span>][<span class="number">7</span>]][<span class="number">7</span>]</span><br><span class="line">                            bianliang2 = dataa[result[<span class="number">1</span>][<span class="number">0</span>]][<span class="number">0</span>] + dataa[result[<span class="number">1</span>][<span class="number">1</span>]][<span class="number">1</span>] + dataa[result[<span class="number">1</span>][<span class="number">2</span>]][<span class="number">2</span>] + \</span><br><span class="line">                                        dataa[result[<span class="number">1</span>][<span class="number">3</span>]][<span class="number">3</span>] + dataa[result[<span class="number">1</span>][<span class="number">4</span>]][<span class="number">4</span>] + dataa[result[<span class="number">1</span>][<span class="number">5</span>]][<span class="number">5</span>] + \</span><br><span class="line">                                        dataa[result[<span class="number">1</span>][<span class="number">6</span>]][<span class="number">6</span>] + dataa[result[<span class="number">1</span>][<span class="number">7</span>]][<span class="number">7</span>]</span><br><span class="line">                            bianliang3 = dataa[result[<span class="number">2</span>][<span class="number">0</span>]][<span class="number">0</span>] + dataa[result[<span class="number">2</span>][<span class="number">1</span>]][<span class="number">1</span>] + dataa[result[<span class="number">2</span>][<span class="number">2</span>]][<span class="number">2</span>] + \</span><br><span class="line">                                        dataa[result[<span class="number">2</span>][<span class="number">3</span>]][<span class="number">3</span>] + dataa[result[<span class="number">2</span>][<span class="number">4</span>]][<span class="number">4</span>] + dataa[result[<span class="number">2</span>][<span class="number">5</span>]][<span class="number">5</span>] + \</span><br><span class="line">                                        dataa[result[<span class="number">2</span>][<span class="number">6</span>]][<span class="number">6</span>] + dataa[result[<span class="number">2</span>][<span class="number">7</span>]][<span class="number">7</span>]</span><br><span class="line">                            bianliang4 = dataa[result[<span class="number">3</span>][<span class="number">0</span>]][<span class="number">0</span>] + dataa[result[<span class="number">3</span>][<span class="number">1</span>]][<span class="number">1</span>] + dataa[result[<span class="number">3</span>][<span class="number">2</span>]][<span class="number">2</span>] + \</span><br><span class="line">                                        dataa[result[<span class="number">3</span>][<span class="number">3</span>]][<span class="number">3</span>] + dataa[result[<span class="number">3</span>][<span class="number">4</span>]][<span class="number">4</span>] + dataa[result[<span class="number">3</span>][<span class="number">5</span>]][<span class="number">5</span>] + \</span><br><span class="line">                                        dataa[result[<span class="number">3</span>][<span class="number">6</span>]][<span class="number">6</span>] + dataa[result[<span class="number">3</span>][<span class="number">7</span>]][<span class="number">7</span>]</span><br><span class="line">                            bianliang5 = dataa[result[<span class="number">4</span>][<span class="number">0</span>]][<span class="number">0</span>] + dataa[result[<span class="number">4</span>][<span class="number">1</span>]][<span class="number">1</span>] + dataa[result[<span class="number">4</span>][<span class="number">2</span>]][<span class="number">2</span>] + \</span><br><span class="line">                                        dataa[result[<span class="number">4</span>][<span class="number">3</span>]][<span class="number">3</span>] + dataa[result[<span class="number">4</span>][<span class="number">4</span>]][<span class="number">4</span>] + dataa[result[<span class="number">4</span>][<span class="number">5</span>]][<span class="number">5</span>] + \</span><br><span class="line">                                        dataa[result[<span class="number">4</span>][<span class="number">6</span>]][<span class="number">6</span>] + dataa[result[<span class="number">4</span>][<span class="number">7</span>]][<span class="number">7</span>]</span><br><span class="line">                            bianliang = (bianliang1 + bianliang2 + bianliang3 + bianliang4 + bianliang5) / <span class="number">5</span></span><br><span class="line">                            fangcha = np.<span class="built_in">sum</span>((bianliang - bianliang1)**<span class="number">2</span>) + np.<span class="built_in">sum</span>((bianliang - bianliang2)**<span class="number">2</span>) + \</span><br><span class="line">                                      np.<span class="built_in">sum</span>((bianliang - bianliang3)**<span class="number">2</span>) + np.<span class="built_in">sum</span>((bianliang - bianliang4)**<span class="number">2</span>) + \</span><br><span class="line">                                      np.<span class="built_in">sum</span>((bianliang - bianliang5)**<span class="number">2</span>)</span><br><span class="line">                            <span class="keyword">if</span> fangcha &lt; minfangcha:</span><br><span class="line">                                minfangcha = fangcha</span><br><span class="line">                                save_result = result</span><br><span class="line"></span><br><span class="line"><span class="comment"># 记录结束时间</span></span><br><span class="line">end_time = time.time()</span><br><span class="line"><span class="comment"># 计算执行时间</span></span><br><span class="line">execution_time = end_time - start_time</span><br><span class="line"><span class="comment"># 打印执行时间</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;程序执行时间: <span class="subst">&#123;execution_time&#125;</span> 秒&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(minfangcha)</span><br><span class="line"><span class="built_in">print</span>(save_result)</span><br><span class="line"><span class="comment"># for nums in root.children:</span></span><br><span class="line"><span class="comment">#     print(nums.value)</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux嵌入式3-输入设备</title>
      <link href="/2024/01/14/Linux%E5%B5%8C%E5%85%A5%E5%BC%8F3-%E8%BE%93%E5%85%A5%E8%AE%BE%E5%A4%87/"/>
      <url>/2024/01/14/Linux%E5%B5%8C%E5%85%A5%E5%BC%8F3-%E8%BE%93%E5%85%A5%E8%AE%BE%E5%A4%87/</url>
      
        <content type="html"><![CDATA[<h1 id="1、输入类设备描述"><a href="#1、输入类设备描述" class="headerlink" title="1、输入类设备描述"></a>1、输入类设备描述</h1><p>设备文件路径：&#x2F;dev&#x2F;input&#x2F;event</p><p>查看设备事件命令：cat &#x2F;proc&#x2F;bus&#x2F;input&#x2F;devices</p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240114204650594.png" alt="image-20240114204650594"></p><h1 id="2、linux内核描述"><a href="#2、linux内核描述" class="headerlink" title="2、linux内核描述"></a>2、linux内核描述</h1><h3 id="输入设备描述事件"><a href="#输入设备描述事件" class="headerlink" title="输入设备描述事件"></a>输入设备描述事件</h3><p>查看事件描述符在”<strong>input-event-codes.h</strong>“文件中，已经在linux&#x2F;input.h中包含</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">input_event</span> &#123;</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> (__BITS_PER_LONG != 32 || !defined(__USE_TIME_BITS64)) &amp;&amp; !defined(__KERNEL__)</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">time</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> input_event_sec time.tv_sec</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> input_event_usec time.tv_usec</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="type">__kernel_ulong_t</span> __sec;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(__sparc__) &amp;&amp; defined(__arch64__)</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> __usec;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> __pad;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="type">__kernel_ulong_t</span> __usec;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> input_event_sec  __sec</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> input_event_usec __usec</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">__u16 type;</span><br><span class="line">__u16 code;</span><br><span class="line">__s32 value;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> timeval 为事件上报时间</span></span><br><span class="line"><span class="comment"> type 为事件类型</span></span><br><span class="line"><span class="comment"> code 为具体事件</span></span><br><span class="line"><span class="comment"> value 为事件的值</span></span><br><span class="line"><span class="comment"> 例如键盘按键KEY0按下时，type表示触发按键，code表示KEY0，value表示按下还是松开</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><strong>数据同步：</strong></p><p>同步事件<em><strong>EV_SYN</strong></em>用于实现同步操作、告知接收者本轮上报的数据已经完整，例如触摸屏幕一次操作需要上报x轴坐标，y轴坐标、触摸点信息等，此时就需要同步事件。同步事件的type类型如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> SYN_REPORT 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SYN_CONFIG 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SYN_MT_REPORT 2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SYN_DROPPED 3</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SYN_MAX 0xf</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SYN_CNT (SYN_MAX+1)</span></span><br></pre></td></tr></table></figure><p><strong>所有的事件上报完成后都需要再上报一个同步事件，一般是SYN_REPORT，value为0。</strong></p><h1 id="3、读取开发板上报事件"><a href="#3、读取开发板上报事件" class="headerlink" title="3、读取开发板上报事件"></a>3、读取开发板上报事件</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;poll.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/input.h&gt;</span></span></span><br><span class="line"><span class="comment">// /dev/input/event2</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span>&#123;</span><br><span class="line">    <span class="type">char</span> gpio_path[<span class="number">100</span>];</span><br><span class="line">    <span class="type">char</span> file_path[<span class="number">100</span>];</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">input_event</span> <span class="title">in_ev</span> =</span> &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">pollfd</span> <span class="title">pfd</span>;</span></span><br><span class="line">    <span class="type">char</span> val;</span><br><span class="line">    <span class="type">int</span> fd;</span><br><span class="line">    <span class="comment">//效验传参   ./exe /dev/input/event2</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">2</span> != argc)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">&quot;usage:%s &lt;gpio&gt; &lt;value&gt;\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//打开事件</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> &gt; (fd = open(argv[<span class="number">1</span>],O_RDONLY)))</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;open export error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//循环阻塞时读取上报事件</span></span><br><span class="line">    <span class="keyword">for</span> (;;)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* code */</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">sizeof</span>(<span class="keyword">struct</span> input_event) != read(fd, &amp;in_ev, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> input_event)))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">/* code */</span></span><br><span class="line">            perror(<span class="string">&quot;read error!&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;type: %d code: %d value: %d\n&quot;</span>,in_ev.type, in_ev.code, in_ev.value);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4、触摸屏上报事件分析"><a href="#4、触摸屏上报事件分析" class="headerlink" title="4、触摸屏上报事件分析"></a>4、触摸屏上报事件分析</h1><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240114212415740.png" alt="image-20240114212415740"></p><p>按下触摸屏后触发绝对位移事件EV_ABS（type&#x3D;3）中的ABS_MT_TRACKING_ID（code&#x3D;57）事件，value为78，表示有一个新的触点被创建，value为-1时表示触点松开，触点的ID为78，53和54分别表示x坐标和y坐标。</p><p>获取触摸屏信息  需要使用一个开放函数：ioctl（input&#x2F;output control）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">ioctl</span><span class="params">(<span class="type">int</span> fd, <span class="type">unsigned</span> <span class="type">long</span> request, ...)</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> fd 是文件描述符，表示要控制的设备。</span></span><br><span class="line"><span class="comment"> request 是控制命令，通常是一个宏，定义了要执行的特定操作。</span></span><br><span class="line"><span class="comment"> 可选的参数 ... 取决于特定的 ioctl 命令，可能包含输入参数、输出参数或者不需要参数。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//查询触摸屏触点信息，存放在info中</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">input_absinfo</span> <span class="title">info</span>;</span></span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span> &gt; ioctl(fd, EVIOCGABS(ABS_MT_SLOT), &amp;info))&#123;</span><br><span class="line">        perror(<span class="string">&quot;ioctl error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/* 常用来处理陀螺仪数据</span></span><br><span class="line"><span class="comment">struct input_absinfo &#123;</span></span><br><span class="line"><span class="comment">__s32 value;</span></span><br><span class="line"><span class="comment">__s32 minimum;</span></span><br><span class="line"><span class="comment">__s32 maximum;</span></span><br><span class="line"><span class="comment">__s32 fuzz;</span></span><br><span class="line"><span class="comment">__s32 flat;</span></span><br><span class="line"><span class="comment">__s32 resolution;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>获取触摸点程序源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;poll.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/input.h&gt;</span></span></span><br><span class="line"><span class="comment">// /dev/input/event2</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span>&#123;</span><br><span class="line">    <span class="type">char</span> gpio_path[<span class="number">100</span>];</span><br><span class="line">    <span class="type">char</span> file_path[<span class="number">100</span>];</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">input_absinfo</span> <span class="title">info</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">pollfd</span> <span class="title">pfd</span>;</span></span><br><span class="line">    <span class="type">int</span> max_slots;</span><br><span class="line">    <span class="type">int</span> fd;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">2</span> != argc)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">&quot;usage:%s &lt;gpio&gt; &lt;value&gt;\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> &gt; (fd = open(argv[<span class="number">1</span>],O_RDONLY)))</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;open export error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">0</span> &gt; ioctl(fd, EVIOCGABS(ABS_MT_SLOT), &amp;info))&#123;</span><br><span class="line">        perror(<span class="string">&quot;ioctl error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    max_slots = info.maximum - info.minimum;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;max slots: %d\n&quot;</span>,max_slots);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5、单点触摸测试"><a href="#5、单点触摸测试" class="headerlink" title="5、单点触摸测试"></a>5、单点触摸测试</h1><p>参考多点触摸实验</p><h1 id="6、多点触摸测试"><a href="#6、多点触摸测试" class="headerlink" title="6、多点触摸测试"></a>6、多点触摸测试</h1><p>多点实验中，触摸点信息上报流程：</p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240118215126784.png" alt="image-20240118215126784"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">第一个触摸点直接上报ABS_MT_TRACKING_ID，ID只需知道是否为0，-1，大于0即可，具体编号不需要关心</span><br><span class="line">出现第二个触摸点时，先上报ABS_MT_SLOT槽位信息，再上报坐标信息，最后上报ABS_MT_TRACKING_ID</span><br><span class="line">如果另一个触摸点发生移动时，先上传ABS_MT_SLOT，再上传坐标信息，相同触摸点移动不上报ABS_MT_SLOT</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;poll.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/input.h&gt;</span></span></span><br><span class="line"><span class="comment">// 多点触摸实验</span></span><br><span class="line"><span class="comment">// /dev/input/event1</span></span><br><span class="line"><span class="comment">//每个触摸点信息，valid为1时表示触摸点状态更新</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ts_mt</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="type">int</span> y;</span><br><span class="line">    <span class="type">int</span> id; <span class="comment">// 表示触摸屏的唯一ID ABS_MT_TRACKING_ID</span></span><br><span class="line">    <span class="type">int</span> valid;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//缓存记录坐标，等待上报同步事件后再将坐标写在ts_mt结构体数组返回</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tp_xy</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="type">int</span> y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/* 读取一次同步事件的触摸点坐标</span></span><br><span class="line"><span class="comment">fd: 时间句柄</span></span><br><span class="line"><span class="comment">max_slots： 最大触摸点数</span></span><br><span class="line"><span class="comment">mt: ts_mt数组指针</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">ts_read</span><span class="params">(<span class="type">const</span> <span class="type">int</span> fd, <span class="type">const</span> <span class="type">int</span> max_slots, <span class="keyword">struct</span> ts_mt *mt)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//上报事件</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">input_event</span> <span class="title">in_ev</span>;</span></span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> slot = <span class="number">0</span>;</span><br><span class="line">    <span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">tp_xy</span> <span class="title">xy</span>[12] =</span> &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="comment">//清空ts_mt数组指针内容</span></span><br><span class="line">    <span class="built_in">memset</span>(mt, <span class="number">0x0</span>, max_slots*<span class="keyword">sizeof</span>(<span class="keyword">struct</span> ts_mt));</span><br><span class="line">    <span class="comment">// 设置id为-2，不为0表示触摸点按下，-1表示触摸点松开</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; max_slots; i++)</span><br><span class="line">        mt[i].id = <span class="number">-2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (;;)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> input_event) != read(fd, &amp;in_ev, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> input_event)))&#123;</span><br><span class="line">            perror(<span class="string">&quot;read error&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">switch</span> (in_ev.type)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 判断绝对位移事件</span></span><br><span class="line">            <span class="keyword">case</span> EV_ABS:</span><br><span class="line">                <span class="keyword">switch</span> (in_ev.code)</span><br><span class="line">                &#123;</span><br><span class="line">                        <span class="comment">// 触摸点槽位 code=47</span></span><br><span class="line">                    <span class="keyword">case</span> ABS_MT_SLOT:</span><br><span class="line">                        slot = in_ev.value;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                        <span class="comment">// X轴坐标 code=53</span></span><br><span class="line">                    <span class="keyword">case</span> ABS_MT_POSITION_X:</span><br><span class="line">                        xy[slot].x = in_ev.value;</span><br><span class="line">                        mt[slot].valid = <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                        <span class="comment">// y轴坐标 code=54</span></span><br><span class="line">                    <span class="keyword">case</span> ABS_MT_POSITION_Y:</span><br><span class="line">                        xy[slot].y = in_ev.value;</span><br><span class="line">                        mt[slot].valid = <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                        <span class="comment">// 触摸点ID code=57 等于0表示移动事件</span></span><br><span class="line">                    <span class="keyword">case</span> ABS_MT_TRACKING_ID:</span><br><span class="line">                        mt[slot].id = in_ev.value;</span><br><span class="line">                        mt[slot].valid = <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">// 判断同步事件</span></span><br><span class="line">            <span class="keyword">case</span> EV_SYN:</span><br><span class="line">                <span class="keyword">if</span>(SYN_REPORT==in_ev.code)&#123;</span><br><span class="line">                    <span class="comment">//将记录的坐标更新到mt中</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; max_slots; i++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        mt[i].x = xy[i].x;</span><br><span class="line">                        mt[i].y = xy[i].y;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span>&#123;</span><br><span class="line">    <span class="type">char</span> gpio_path[<span class="number">100</span>];</span><br><span class="line">    <span class="type">char</span> file_path[<span class="number">100</span>];</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">input_absinfo</span> <span class="title">info</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ts_mt</span> *<span class="title">mt</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">pollfd</span> <span class="title">pfd</span>;</span></span><br><span class="line">    <span class="type">int</span> max_slots;</span><br><span class="line">    <span class="type">int</span> fd;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">2</span> != argc)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">&quot;usage:%s &lt;gpio&gt; &lt;value&gt;\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> &gt; (fd = open(argv[<span class="number">1</span>],O_RDONLY)))</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;open export error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="number">0</span> &gt; ioctl(fd, EVIOCGABS(ABS_MT_SLOT), &amp;info))&#123;</span><br><span class="line">        perror(<span class="string">&quot;ioctl error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    max_slots = info.maximum + <span class="number">1</span> - info.minimum;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;max slots: %d\n&quot;</span>,max_slots);</span><br><span class="line"><span class="comment">//创建长度为max_slots的触摸点信息数组</span></span><br><span class="line">    mt = <span class="built_in">calloc</span>(max_slots, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> ts_mt));</span><br><span class="line">    <span class="keyword">for</span> (; ; )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">0</span>&gt;ts_read(fd, max_slots, mt))</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; max_slots; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//判断第i个触摸点的状态是否发生改变</span></span><br><span class="line">            <span class="keyword">if</span> (mt[i].valid)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="number">0</span>&lt;=mt[i].id)</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;slot&lt;%d&gt;, 按下(%d, %d)\n&quot;</span>, i, mt[i].x, mt[i].y);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(<span class="number">-1</span>==mt[i].id)</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;slot&lt;%d&gt;, 松开\n&quot;</span>, i);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;slot&lt;%d&gt;, 移动(%d, %d)\n&quot;</span>, i, mt[i].x, mt[i].y);</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    close(fd);</span><br><span class="line">    <span class="built_in">free</span>(mt);</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux嵌入式学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux嵌入式2-GPIO编程</title>
      <link href="/2024/01/14/Linux%E5%B5%8C%E5%85%A5%E5%BC%8F2-GPIO%E7%BC%96%E7%A8%8B/"/>
      <url>/2024/01/14/Linux%E5%B5%8C%E5%85%A5%E5%BC%8F2-GPIO%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="头文件说明"><a href="#头文件说明" class="headerlink" title="头文件说明"></a>头文件说明</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;sys/types.h&gt;：该头文件定义了一些基本的系统数据类型，如<span class="type">size_t</span>、<span class="type">time_t</span>等。</span><br><span class="line">&lt;sys/stat.h&gt;：该头文件定义了一些关于文件状态的函数和宏，如stat()、S_IRUSR等。</span><br><span class="line">&lt;fcntl.h&gt;：该头文件定义了一些文件控制操作的函数和常量，如open()、O_RDONLY等。</span><br><span class="line">&lt;unistd.h&gt;：该头文件定义了一些系统调用函数，如read()、write()等。</span><br></pre></td></tr></table></figure><h3 id="函数说明"><a href="#函数说明" class="headerlink" title="函数说明"></a>函数说明</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">access</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *pathname, <span class="type">int</span> mode)</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">mode 是要检查的权限模式。常用的权限模式有以下几种：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">F_OK：用于检查文件或目录是否存在。</span></span><br><span class="line"><span class="comment">R_OK：用于检查文件或目录是否可读。</span></span><br><span class="line"><span class="comment">W_OK：用于检查文件或目录是否可写。</span></span><br><span class="line"><span class="comment">X_OK：用于检查文件或目录是否可执行。</span></span><br><span class="line"><span class="comment">存在返回0，不存在返回-1</span></span><br><span class="line"><span class="comment">*/</span>   </span><br><span class="line">    </span><br><span class="line">len = <span class="built_in">strlen</span>(argv[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">if</span>(len != write(fd,argv[<span class="number">1</span>],len))&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">write函数向文件写入数据，写入argv[1]字符串，后面接写入的字节数，成功返回写入的字节数</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="一、GPIO应用编程"><a href="#一、GPIO应用编程" class="headerlink" title="一、GPIO应用编程"></a>一、GPIO应用编程</h2><h3 id="1、基础属性："><a href="#1、基础属性：" class="headerlink" title="1、基础属性："></a>1、基础属性：</h3><p>gpio设备目录在&#x2F;sys&#x2F;class&#x2F;gpio中：</p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20231015142048558.png" alt="image-20231015142048558"></p><p>gpiochip0<del>128分别对应i.max6ull的五组gpio1</del>5，export用来导出指定编号的gpio，加入需要导出GPIO4_IO20，首先需要确定GPIO的编号，GPIO4对应gpiochip96，编号为94+20&#x3D;114</p><p>执行导出命令为echo 94 &gt; export</p><p>以导出GPIO0_IO1为例：执行echo 1 &gt; export，会生成一个gpio1的文件夹，里面描述了gpio1的相关信息：</p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20231015142724436.png" alt="image-20231015142724436"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dirction: IO的方向可以设置为out 和 in</span><br><span class="line">active_low: 电平逻辑状态，默认为<span class="number">0</span>，此时<span class="number">1</span>为高电平 <span class="number">0</span>为低电平</span><br><span class="line">value： 电平状态</span><br><span class="line">edge: 中断触发：none rising falling both分别表示无触发、上升沿、下降沿、边沿触发</span><br></pre></td></tr></table></figure><h3 id="2、gpio-config函数"><a href="#2、gpio-config函数" class="headerlink" title="2、gpio_config函数"></a>2、gpio_config函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">path：gpioX路径/sys/class/gpio/gpio1</span></span><br><span class="line"><span class="comment">attr：需要修改的属性 direction</span></span><br><span class="line"><span class="comment">value：修改的具体值out</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">gpio_config</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *path, <span class="type">const</span> <span class="type">char</span> *attr, <span class="type">const</span> <span class="type">char</span> *val)</span>&#123;</span><br><span class="line">    <span class="type">int</span> fd;</span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line">    <span class="type">char</span> file_path[<span class="number">100</span>];</span><br><span class="line">    <span class="comment">// 拼接字符串</span></span><br><span class="line">    <span class="built_in">sprintf</span>(file_path,<span class="string">&quot;%s/%s&quot;</span>, path, attr);</span><br><span class="line">    <span class="comment">// 打开文件</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> &gt; (fd = open(file_path, O_WRONLY)))</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;open gpio error&quot;</span>);</span><br><span class="line">        close(fd);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 向文件写入指定长度的数据</span></span><br><span class="line">    len = <span class="built_in">strlen</span>(val);</span><br><span class="line">    <span class="keyword">if</span> (len != write(fd, val, len))</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;write info error&quot;</span>);</span><br><span class="line">        close(fd);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    close(fd);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">&quot;write success!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// main函数：</span></span><br><span class="line"><span class="comment">// 判断输入的gpioX是否存在，不存在需要通过写export文件导出IO</span></span><br><span class="line"><span class="built_in">sprintf</span>(gpio_path,<span class="string">&quot;/sys/class/gpio/gpio%s&quot;</span>,argv[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">if</span> (access(gpio_path,F_OK))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> fd;</span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> &gt; (fd = open(<span class="string">&quot;/sys/class/gpio/export&quot;</span>,O_WRONLY)))</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;open export error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    len = <span class="built_in">strlen</span>(argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">if</span>(len != write(fd,argv[<span class="number">1</span>],len))&#123;</span><br><span class="line">        perror(<span class="string">&quot;write error&quot;</span>);</span><br><span class="line">        close(fd);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    close(fd);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(gpio_config(gpio_path,<span class="string">&quot;direction&quot;</span>, <span class="string">&quot;in&quot;</span>))&#123;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">&quot;write direction error\n&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(gpio_config(gpio_path,<span class="string">&quot;active_low&quot;</span>, <span class="string">&quot;0&quot;</span>))&#123;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">&quot;write active_low error\n&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(gpio_config(gpio_path,<span class="string">&quot;value&quot;</span>, argv[<span class="number">2</span>]))&#123;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">&quot;write value error\n&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、poll-函数"><a href="#3、poll-函数" class="headerlink" title="3、poll()函数"></a>3、poll()函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用poll()函数实现非阻塞式中断触发</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span>&#123;</span><br><span class="line">    <span class="type">char</span> gpio_path[<span class="number">100</span>];</span><br><span class="line">    <span class="type">char</span> file_path[<span class="number">100</span>];</span><br><span class="line">    <span class="comment">// 创建pollfd结构体，描述文件就绪状态</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">pollfd</span> <span class="title">pfd</span>;</span></span><br><span class="line">    <span class="type">char</span> val;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">2</span> != argc)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">&quot;usage:%s &lt;gpio&gt; &lt;value&gt;\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sprintf</span>(gpio_path,<span class="string">&quot;/sys/class/gpio/gpio%s&quot;</span>,argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">if</span> (access(gpio_path,F_OK))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> fd;</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span> &gt; (fd = open(<span class="string">&quot;/sys/class/gpio/export&quot;</span>,O_WRONLY)))</span><br><span class="line">        &#123;</span><br><span class="line">            perror(<span class="string">&quot;open export error&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        len = <span class="built_in">strlen</span>(argv[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">if</span>(len != write(fd,argv[<span class="number">1</span>],len))&#123;</span><br><span class="line">            perror(<span class="string">&quot;write error&quot;</span>);</span><br><span class="line">            close(fd);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        close(fd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(gpio_config(gpio_path,<span class="string">&quot;direction&quot;</span>, <span class="string">&quot;in&quot;</span>))&#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">&quot;write direction error\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(gpio_config(gpio_path,<span class="string">&quot;active_low&quot;</span>, <span class="string">&quot;0&quot;</span>))&#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">&quot;write active_low error\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 配置为边沿触发</span></span><br><span class="line">    <span class="keyword">if</span>(gpio_config(gpio_path,<span class="string">&quot;edge&quot;</span>, <span class="string">&quot;both&quot;</span>))&#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">&quot;write edge error\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 打开IO状态value文件，文件描述符保存在pfd.fd</span></span><br><span class="line">    <span class="built_in">sprintf</span>(file_path,<span class="string">&quot;%s/%s&quot;</span>, gpio_path, <span class="string">&quot;value&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> &gt; (pfd.fd = open(file_path,O_RDONLY)))</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;open pfd.fd error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    pfd.events = POLLPRI;<span class="comment">// 只关心高优先级数据可读 中断 只有高优先级才会触发文件转换为就绪态</span></span><br><span class="line">    read(pfd.fd, &amp;val, <span class="number">1</span>);<span class="comment">// 读取一次清除状态</span></span><br><span class="line">    <span class="comment">//轮询读取</span></span><br><span class="line">    <span class="keyword">for</span> (;;)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 监听pfd文件状态，内部有一个文件描述符 超时时间-1</span></span><br><span class="line">        ret = poll(&amp;pfd, <span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span> &gt; ret) &#123;</span><br><span class="line">            perror(<span class="string">&quot;poll error&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="number">0</span> == ret)&#123;</span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">&quot;poll time out&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 事件触发</span></span><br><span class="line">        <span class="keyword">if</span> (pfd.revents &amp; POLLPRI)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 因为之前读取过文件，需要移动指针到0</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="number">0</span> &gt; lseek(pfd.fd, <span class="number">0</span>, SEEK_SET))&#123;</span><br><span class="line">                perror(<span class="string">&quot;lseek error&quot;</span>);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">// 读取文件</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="number">0</span> &gt; read(pfd.fd, &amp;val, <span class="number">1</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                perror(<span class="string">&quot;read pfd.fd error&quot;</span>);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;get interupt &lt;value=%c&gt;\n&quot;</span>, val);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux嵌入式学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux嵌入式1-启动开发环境</title>
      <link href="/2024/01/14/Linux%E5%B5%8C%E5%85%A5%E5%BC%8F1-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2024/01/14/Linux%E5%B5%8C%E5%85%A5%E5%BC%8F1-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="应用开发环境搭建："><a href="#应用开发环境搭建：" class="headerlink" title="应用开发环境搭建："></a>应用开发环境搭建：</h1><p>开发板移植uboot：完成网络移植</p><p>服务器安装nfs和tftp</p><p>windows、服务器、开发板需要处在同一网段，使用虚拟需要添加网卡开启桥接模式，<em><strong>关闭防火墙</strong></em></p><p>挂载zImage和dtb之前先使用nfs和tftp测试</p><p>完成配置后 uboot在emmc中，zImage和dtb使用tftp挂载，根文件系统使用nfs挂载</p><p>最后验证交叉编译工具</p><p>安装nfs过程出现的问题，挂载失败，检查是服务器nfs版本为4，uboot只支持2（原文链接：<a href="https://blog.csdn.net/qq_42212668/article/details/125250873%EF%BC%89">https://blog.csdn.net/qq_42212668/article/details/125250873）</a></p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20231007210103881.png" alt="image-20231007210103881"></p><h2 id="配置过程中的常用命令："><a href="#配置过程中的常用命令：" class="headerlink" title="配置过程中的常用命令："></a>配置过程中的常用命令：</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">setenv ipaddr 192.168.1.50</span><br><span class="line">setenv ethaddr b8:ae:1d:01:00:00</span><br><span class="line">setenv gatewayip 192.168.1.1</span><br><span class="line">setenv netmask 255.255.255.0</span><br><span class="line">setenv serverip 192.168.1.253</span><br><span class="line">saveenv</span><br><span class="line"></span><br><span class="line">nfs启动文件系统：</span><br><span class="line">setenv bootargs &#x27;console=ttymxc0,115200 root=/dev/nfs nfsroot=192.168.1.107:/home/wujing/linux/nfs/alientrootfs,proto=tcp rw ip=192.168.1.50:192.168.1.107:192.168.1.1:255.255.255.0::eth0:off&#x27;</span><br><span class="line"></span><br><span class="line">tftp挂载</span><br><span class="line">setenv bootcmd &#x27;tftp 80800000 zImage; tftp 83000000 imx6ull-14x14-emmc-4.3-800x480-c.dtb; bootz 80800000 - 83000000&#x27;</span><br></pre></td></tr></table></figure><h1 id="应用开发环境启动："><a href="#应用开发环境启动：" class="headerlink" title="应用开发环境启动："></a>应用开发环境启动：</h1><p>启动Ubuntu，mobaX连接开发板，检查Ubuntu的IP地址和开发板uboot中设置的tftp服务器地址是否一致，不一致使用以下命令修改：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setenv serverip 192.168.1.253</span><br></pre></td></tr></table></figure><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240114122139754.png" alt="image-20240114122139754"></p><p><strong>检查虚拟机网络设置，VMnet1为net模式，用来虚拟机上网，VMnet0为桥接模式，用来连接开发板挂载。</strong></p><p>检查无误后在uboot中输入boot启动</p><p>nfs挂载根文件系统目录 ：&#x2F;home&#x2F;wujing&#x2F;linux&#x2F;nfs&#x2F;alientrootfs</p><p>应用程序源码存放目录：&#x2F;home&#x2F;wujing&#x2F;Desktop&#x2F;alitenk-test</p><p>常用命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">printenv #查看环境变量</span><br><span class="line">boot #启动linux</span><br></pre></td></tr></table></figure><p>使能Ubuntu环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /opt/fsl-imx-x11/4.1.15-2.1.0/environment-setup-cortexa7hf-neon-poky-linux-gnueabi</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux嵌入式学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2024.1.6姥山岛</title>
      <link href="/2024/01/13/2024-1-6%E5%A7%A5%E5%B1%B1%E5%B2%9B/"/>
      <url>/2024/01/13/2024-1-6%E5%A7%A5%E5%B1%B1%E5%B2%9B/</url>
      
        <content type="html"><![CDATA[<p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_4170-1.jpg" alt="DSC_4170-1"></p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_4492-1.jpg" alt="DSC_4492-1"></p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_4067-1.jpg" alt="DSC_4067-1"></p>]]></content>
      
      
      <categories>
          
          <category> 摄影日记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>FOC学习笔记</title>
      <link href="/2024/01/13/FOC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/01/13/FOC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="无刷电机驱动原理"><a href="#无刷电机驱动原理" class="headerlink" title="无刷电机驱动原理"></a>无刷电机驱动原理</h1><p>FOC矢量控制</p><h1 id="Park变换"><a href="#Park变换" class="headerlink" title="Park变换"></a>Park变换</h1>]]></content>
      
      
      <categories>
          
          <category> FOC学习 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
