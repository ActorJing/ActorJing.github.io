<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>我超爱大海的</title>
  
  <subtitle>世界很暗，但是你来了</subtitle>
  <link href="https://actorjing.github.io/atom.xml" rel="self"/>
  
  <link href="https://actorjing.github.io/"/>
  <updated>2025-03-10T08:49:02.979Z</updated>
  <id>https://actorjing.github.io/</id>
  
  <author>
    <name>Jing Wu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2025.3.8南京植物园</title>
    <link href="https://actorjing.github.io/2025/03/10/2025-3-8%E5%8D%97%E4%BA%AC%E6%A4%8D%E7%89%A9%E5%9B%AD/"/>
    <id>https://actorjing.github.io/2025/03/10/2025-3-8%E5%8D%97%E4%BA%AC%E6%A4%8D%E7%89%A9%E5%9B%AD/</id>
    <published>2025-03-10T08:38:55.000Z</published>
    <updated>2025-03-10T08:49:02.979Z</updated>
    
    <content type="html"><![CDATA[<p>2025.3.8南京植物园有盛开的樱花，待放的郁金香，热带植物园，还有</p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250310163951.jpg" alt="微信图片_20250310163951"></p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250310164042.jpg" alt="微信图片_20250310164042"></p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250310164059.jpg" alt="微信图片_20250310164059"></p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250310164126.jpg" alt="微信图片_20250310164126"></p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250310164155.jpg" alt="微信图片_20250310164155"></p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250310164208.jpg" alt="微信图片_20250310164208"></p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250310164218.jpg" alt="微信图片_20250310164218"></p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250310164236.jpg" alt="微信图片_20250310164236"></p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250310164245.jpg" alt="微信图片_20250310164245"></p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250310164312.jpg" alt="微信图片_20250310164312"></p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250310164257.jpg" alt="微信图片_20250310164257"></p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250310164827.jpg" alt="微信图片_20250310164827"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;2025.3.8南京植物园有盛开的樱花，待放的郁金香，热带植物园，还有&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E</summary>
      
    
    
    
    <category term="摄影日记" scheme="https://actorjing.github.io/categories/%E6%91%84%E5%BD%B1%E6%97%A5%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>ESP32_RTOS日志</title>
    <link href="https://actorjing.github.io/2024/10/11/ESP32-RTOS%E6%97%A5%E5%BF%97/"/>
    <id>https://actorjing.github.io/2024/10/11/ESP32-RTOS%E6%97%A5%E5%BF%97/</id>
    <published>2024-10-11T14:36:25.000Z</published>
    <updated>2024-10-11T14:42:28.511Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ESP32S3-RTOS日志"><a href="#ESP32S3-RTOS日志" class="headerlink" title="ESP32S3-RTOS日志"></a>ESP32S3-RTOS日志</h3><h3 id="1-ESP32S3双核"><a href="#1-ESP32S3双核" class="headerlink" title="1.ESP32S3双核"></a>1.ESP32S3双核</h3><p>不使用RTOS下，默认在核1运行，核0使用wifi和蓝牙，使用RTOS时，任务会自动在两核心调度</p><pre class=" language-c"><code class="language-c">configNUMBER_OF_CORES</code></pre><p>配置RTOS核心个数（了解即可）</p><h3 id="2-IWDT和TWDT"><a href="#2-IWDT和TWDT" class="headerlink" title="2.IWDT和TWDT"></a>2.IWDT和TWDT</h3><p>外部中断看门狗和任务看门狗</p><p>理解为硬复位和软复位，任务看门狗默认打开，在设置时搜多WDT找到task wdt关闭或打开</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;ESP32S3-RTOS日志&quot;&gt;&lt;a href=&quot;#ESP32S3-RTOS日志&quot; class=&quot;headerlink&quot; title=&quot;ESP32S3-RTOS日志&quot;&gt;&lt;/a&gt;ESP32S3-RTOS日志&lt;/h3&gt;&lt;h3 id=&quot;1-ESP32S3双核&quot;&gt;&lt;a h</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>嵌入式八股文.md</title>
    <link href="https://actorjing.github.io/2024/09/18/%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%85%AB%E8%82%A1%E6%96%87/"/>
    <id>https://actorjing.github.io/2024/09/18/%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%85%AB%E8%82%A1%E6%96%87/</id>
    <published>2024-09-18T13:15:23.000Z</published>
    <updated>2025-03-23T11:32:37.691Z</updated>
    
    <content type="html"><![CDATA[<h3 id="SPI"><a href="#SPI" class="headerlink" title="SPI"></a>SPI</h3><p>串行，四线：CLK，MISO，MOSI，CS</p><p>允许一个主机多个从机</p><p>SPI有四种操作模式，对应时钟极性和时钟相位</p><p>CPOL表示CLK的空闲状态有效电平，0空闲低电平，1空闲高电平</p><p>CPHA数据采样时间，0表示第一个跳变沿，1表示第二个跳变沿</p><p>配置SPI传输速度分频值和系统时钟</p><h3 id="UART"><a href="#UART" class="headerlink" title="UART"></a>UART</h3><p>串行，TX，RX</p><h3 id="IIC"><a href="#IIC" class="headerlink" title="IIC"></a>IIC</h3><p>SDA,SCL，同步串行，支持多设备</p><p>起始条件：SCL高，SDA下降沿</p><p>停止条件：SCL高，SDA上升沿</p><h3 id="ETH"><a href="#ETH" class="headerlink" title="ETH"></a>ETH</h3><p>以太网，局域网通信协议使用MAC地址进行设备寻址</p><p>TCP&#x2F;IP协议层次结构：</p><p>应用层，传输层，网络层，数据链路层，物理层</p><h3 id="递归函数定义没有问题，递归深层次后易引发什么问题"><a href="#递归函数定义没有问题，递归深层次后易引发什么问题" class="headerlink" title="递归函数定义没有问题，递归深层次后易引发什么问题"></a>递归函数定义没有问题，递归深层次后易引发什么问题</h3><p>影响执行效率</p><p>栈溢出。</p><p>因为每一次调用函数是，栈区都要给函数分配空间，而且上一次调用并没有结束，调用的次数太多，栈区的内存不够分配了，便会出现栈溢出的情况。</p><h3 id="堆与栈的区别"><a href="#堆与栈的区别" class="headerlink" title="堆与栈的区别"></a>堆与栈的区别</h3><p>（1）栈的空间是系统自动分配和回收，堆的空间是用户手动分配回收（malloc，calloc，realloc，free）</p><p>（2）栈的空间较小，堆的空间较大</p><p>（3）栈的地址空间往地址向下增长，堆的地址空间是由低地址到高地址</p><p>（4）栈的存储效率更高</p><h3 id="PV操作"><a href="#PV操作" class="headerlink" title="PV操作"></a>PV操作</h3><p>申请资源 释放资源<br>一般用于同步和互斥</p><h3 id="什么是嵌入式系统"><a href="#什么是嵌入式系统" class="headerlink" title="什么是嵌入式系统"></a>什么是嵌入式系统</h3><p>完全嵌入受控器件内部、为特定应用而设计的专用计算机系统。与普通计算机不同，嵌入式系统一般拥有非常有限的硬件资源，一般运行固定的程序或固定的操作系统加可变的应用程序。</p><h3 id="volatile关键字的作用"><a href="#volatile关键字的作用" class="headerlink" title="volatile关键字的作用"></a>volatile关键字的作用</h3><p>（1）裸机编程时，某变量是指向寄存器中某一特定地址，添加volatile的变量不进行优化处理；</p><p>（2）某函数与中断函数共享全局变量时，加上volatile，让编译器不要省略该变量的访问；</p><p>（3）多线程中修饰共享全局变量，让编译器不要省略该变量的访问。</p><h2 id="FREERTOS操作系统"><a href="#FREERTOS操作系统" class="headerlink" title="FREERTOS操作系统"></a>FREERTOS操作系统</h2><p>完全免费且开源的嵌入式实时操作系统</p><ol><li>抢占式（pre-emptive）或合作式（co-operative）任务调度方式</li><li>优先级管理</li><li>任务通知机制</li><li>消息队列</li><li>信号量</li></ol><h3 id="启动流程："><a href="#启动流程：" class="headerlink" title="启动流程："></a>启动流程：</h3><p>RTOS系统初始化。比如RTOS里面的全局变量的初始化，空闲任务的创建等。创建各种任务。启动RTOS调度器</p><h3 id="FreeRTOS如何实现实时性"><a href="#FreeRTOS如何实现实时性" class="headerlink" title="FreeRTOS如何实现实时性"></a>FreeRTOS如何实现实时性</h3><p>优先级抢占式调度策略+时间片轮转</p><p>优先级高的任务可以抢占优先级低的任务，同等级别的任务时间片轮转</p><p>时间片轮转根据系统节拍频率决定：configTICK_RATE_HZ</p><p>系统中存在一个空闲任务，当没有其他任务运行时，系统会执行空闲任务</p><h3 id="FreeRTOS同步与通信"><a href="#FreeRTOS同步与通信" class="headerlink" title="FreeRTOS同步与通信"></a>FreeRTOS同步与通信</h3><p>信号量 <code>xSemaphoreGive()</code> 释放信号量，<code>xSemaphoreTake()</code> 获取信号量。</p><p>互斥量二进制信号量，用于互斥事件</p><p>消息队列 <code>xQueueSend()</code> 发送数据，<code>xQueueReceive()</code> 接收数据。</p><p>事件组    是一个32位的变量，每一位表示一个事件，支持多事件同步</p><p>使用事件组创建状态机：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">vTask</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>pvParameters<span class="token punctuation">)</span> <span class="token punctuation">{</span>    EventBits_t uxBits<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        uxBits <span class="token operator">=</span> <span class="token function">xEventGroupWaitBits</span><span class="token punctuation">(</span>xEventGroup<span class="token punctuation">,</span> <span class="token number">0x03</span><span class="token punctuation">,</span> pdTRUE<span class="token punctuation">,</span> pdTRUE<span class="token punctuation">,</span> portMAX_DELAY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>uxBits <span class="token operator">&amp;</span> <span class="token number">0x01</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 状态 1</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>uxBits <span class="token operator">&amp;</span> <span class="token number">0x02</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 状态 2</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="生产者消费者"><a href="#生产者消费者" class="headerlink" title="生产者消费者"></a>生产者消费者</h3><p>生产者-消费者模型是一个经典的并发控制问题，用来解决在多线程环境中，生产者线程和消费者线程之间的同步问题。生产者负责生产数据并将其放入缓冲区，而消费者则从缓冲区中取出数据进行处理。为了防止生产者和消费者之间的竞争，通常使用同步机制来控制访问缓冲区。</p><ol><li><strong>缓冲区</strong>： 一个有限的共享空间，用于存储生产者生产的产品。可以是一个队列、数组等。</li><li><strong>生产者</strong>： 负责将产品生产并放入缓冲区。当缓冲区满时，生产者需要等待。</li><li><strong>消费者</strong>： 负责从缓冲区中取出产品并进行处理。当缓冲区空时，消费者需要等待。</li><li><strong>同步机制</strong>： 使用互斥锁（mutex）和条件变量（condition variable）来确保生产者和消费者对缓冲区的访问是安全的，并解决同步问题。</li></ol><h3 id="使用malloc和free过程中如何避免野指针的产生"><a href="#使用malloc和free过程中如何避免野指针的产生" class="headerlink" title="使用malloc和free过程中如何避免野指针的产生"></a>使用malloc和free过程中如何避免野指针的产生</h3><p>1、初始化指针为NULL</p><p>2、分配内存后检查返回值</p><p>3、释放内存后将指针置为NULL</p><p>4、避免多次释放同一个指针</p><h3 id="MQTT-通信过程"><a href="#MQTT-通信过程" class="headerlink" title="MQTT 通信过程"></a>MQTT 通信过程</h3><p>1、建立连接（客户端使用唯一的客户端ID）</p><p>2、订阅主题（主题是分层结构的字符串）</p><p>3、发布消息（QoS0：最多发送一次，不保证成功；QoS1：至少发送一次，可能重复；QoS2：确保发送一次，防止重复）</p><p>4、消息接收</p><p>5、断开连接</p><h3 id="ADC配置步骤"><a href="#ADC配置步骤" class="headerlink" title="ADC配置步骤"></a>ADC配置步骤</h3><p>1、启动ADC时钟</p><p>2、配置ADC的引脚和通道</p><p>3、设置ADC分辨率（8，10，12）</p><p>4、设置ADC的时钟分频器（采样频率）</p><p>5、配置转换模式（单次，连续，TIM触发）</p><h3 id="宏定义和内敛函数的区别"><a href="#宏定义和内敛函数的区别" class="headerlink" title="宏定义和内敛函数的区别"></a>宏定义和内敛函数的区别</h3><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20241014231600148.png" alt="image-20241014231600148"></p><h3 id="访问百度发生了什么"><a href="#访问百度发生了什么" class="headerlink" title="访问百度发生了什么"></a>访问百度发生了什么</h3><p>1、域名解析，浏览器在缓存中查找是否有对应的IP地址，没有会向DNS服务器发起查询，获取对应IP地址</p><p>2、建立TCP连接</p><p>3、发送HTTP请求，获取网页内容</p><p>4、服务器处理请求，返回响应</p><p>5、浏览器解析HTML，渲染网页</p><h3 id="DNS解析"><a href="#DNS解析" class="headerlink" title="DNS解析"></a>DNS解析</h3><p>DNS是一个分布式的数据库系统，将域名与IP进行映射</p><p>1、检查浏览器本地缓存，操作系统缓存，本地hosts文件</p><p>2、向本地DNS服务器检查缓存，一般由网络服务运营商提供或者自己设置</p><p>3、迭代向更高级的DNS服务器查询</p><p>优化：缓存机制，负载均衡（服务器多个IP，根据区域返回最近的），公共DNS</p><h3 id="FREERTOS和Linux的内存分配区别"><a href="#FREERTOS和Linux的内存分配区别" class="headerlink" title="FREERTOS和Linux的内存分配区别"></a>FREERTOS和Linux的内存分配区别</h3><p>freertos基于任务堆栈的分配和使用，每个任务有自己的栈空间，在任务创建时静态分配</p><p>Linux使用动态内存管理，采用虚拟内存系统，进程之前的内存相互隔离，不同进程无法直接访问对方内存</p><h3 id="DMA"><a href="#DMA" class="headerlink" title="DMA"></a>DMA</h3><p>DMA是一个硬件模块，负责数据搬运，CPU只需初始化DMA配置启动传输后，可以执行其他任务。以SPI为例：</p><p>不使用DMA时，CPU需要将数据写入到SPI的数据寄存器，等待SPI发送完成再写入下一个数据。</p><p>使用DMA时，CPU配置好SPI和DMA控制器，设置数据源地址和目标地址以及传输长度，启动传输后，CPU直接从内存取数据并通过SPI将数据发送出去，此过程无需CPU参与，DMA传输完成后会触发一个中断，CPU可以执行操作。数据准备好后会产生一个DMA请求信号，是硬件信号，触发DMA搬运数据。</p><h3 id="使用联合体判断大小端"><a href="#使用联合体判断大小端" class="headerlink" title="使用联合体判断大小端"></a>使用联合体判断大小端</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token comment" spellcheck="true">// 定义联合体</span><span class="token keyword">union</span> EndianTest <span class="token punctuation">{</span>    <span class="token keyword">int</span> value<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 4 字节的整数</span>    <span class="token keyword">char</span> bytes<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 1 字节的字符数组</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">union</span> EndianTest test<span class="token punctuation">;</span>    test<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">0x01020304</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 设置一个多字节值</span>    <span class="token comment" spellcheck="true">// 检查低地址字节的值</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>test<span class="token punctuation">.</span>bytes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0x04</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Little Endian\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 低地址存储低位字节</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>test<span class="token punctuation">.</span>bytes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0x01</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Big Endian\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 低地址存储高位字节</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Unknown Endian\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 其他情况</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="typedef和define的区别"><a href="#typedef和define的区别" class="headerlink" title="typedef和define的区别"></a>typedef和define的区别</h3><p>typedef是为一个已经存在的数据类型取一个别名，编译器会进行类型检查</p><p>define是宏定义，在预编译阶段进行替换</p><h3 id="sizeof和strlen的区别"><a href="#sizeof和strlen的区别" class="headerlink" title="sizeof和strlen的区别"></a>sizeof和strlen的区别</h3><p>sizeof返回变量或类型的字节大小</p><p>strlen返回字符串的长度</p><h3 id="ESP32支持wifi模式"><a href="#ESP32支持wifi模式" class="headerlink" title="ESP32支持wifi模式"></a>ESP32支持wifi模式</h3><p>sta：连接到wifi网络</p><p>ap：作为热点</p><p>可以同时使用</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;SPI&quot;&gt;&lt;a href=&quot;#SPI&quot; class=&quot;headerlink&quot; title=&quot;SPI&quot;&gt;&lt;/a&gt;SPI&lt;/h3&gt;&lt;p&gt;串行，四线：CLK，MISO，MOSI，CS&lt;/p&gt;
&lt;p&gt;允许一个主机多个从机&lt;/p&gt;
&lt;p&gt;SPI有四种操作模式，对应时钟极性和</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>c++数据结构</title>
    <link href="https://actorjing.github.io/2024/07/20/c-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>https://actorjing.github.io/2024/07/20/c-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</id>
    <published>2024-07-20T15:09:10.000Z</published>
    <updated>2024-07-21T05:42:46.325Z</updated>
    
    <content type="html"><![CDATA[<h1 id="c-数据结构"><a href="#c-数据结构" class="headerlink" title="c++数据结构"></a>c++数据结构</h1><h2 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;c-数据结构&quot;&gt;&lt;a href=&quot;#c-数据结构&quot; class=&quot;headerlink&quot; title=&quot;c++数据结构&quot;&gt;&lt;/a&gt;c++数据结构&lt;/h1&gt;&lt;h2 id=&quot;平衡二叉树&quot;&gt;&lt;a href=&quot;#平衡二叉树&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="算法" scheme="https://actorjing.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>野火H7PRO+RGB565屏幕+LTDC+SDRAM+DMA2D+FreeRTOS+LVGL</title>
    <link href="https://actorjing.github.io/2024/07/16/%E9%87%8E%E7%81%ABH7PRO+RGB565%E5%B1%8F%E5%B9%95+LTDC+SDRAM+DMA2D+FreeRTOS+LVGL/"/>
    <id>https://actorjing.github.io/2024/07/16/%E9%87%8E%E7%81%ABH7PRO+RGB565%E5%B1%8F%E5%B9%95+LTDC+SDRAM+DMA2D+FreeRTOS+LVGL/</id>
    <published>2024-07-16T15:27:23.000Z</published>
    <updated>2024-07-16T12:31:28.174Z</updated>
    
    <content type="html"><![CDATA[<h3 id="野火H7PRO-RGB565屏幕-LTDC-SDRAM-DMA2D-FreeRTOS-LVGL"><a href="#野火H7PRO-RGB565屏幕-LTDC-SDRAM-DMA2D-FreeRTOS-LVGL" class="headerlink" title="野火H7PRO+RGB565屏幕+LTDC+SDRAM+DMA2D+FreeRTOS+LVGL"></a>野火H7PRO+RGB565屏幕+LTDC+SDRAM+DMA2D+FreeRTOS+LVGL</h3><p>时钟配置，功率优化设置为0，设置主频480M，FMC240M，LTDC50M</p><p><img src="https://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240715170751977.png" alt="image-20240715170751977"></p><p>野火开发板使用FMC的CKE1连接SDRAM使用bank2，地址为0xD0000000，cubemx配置如下：（注意GPIO，一开始使用bank1刷图正常，画点错误，发现是IO配置错误，理论上刷图也会报错）</p><p><img src="https://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240715171626368.png" alt="image-20240715171626368"></p><p>配置LTDC：（需要注意引脚IO，参数对应数据手册，LTDC有背景层，图层1和图层2，本工程只使用图层1）</p><p><img src="https://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240715171841114.png" alt="image-20240715171841114"></p><p>数据手册如下：</p><p><img src="https://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240715172018212.png" alt="image-20240715172018212"></p><p>cubemx配置DMA2D：</p><p><img src="https://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240715172054060.png" alt="image-20240715172054060"></p><p>生成工程后，先初始化FMC，再配置SDRAM自动刷新命令，最后初始化LTDC：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">static</span> FMC_SDRAM_CommandTypeDef Command<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> FMC_COMMAND_TARGET_BANK   FMC_SDRAM_CMD_TARGET_BANK2</span>SDRAM_HandleTypeDef hsdram1<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> SDRAM_TIMEOUT                    ((uint32_t)0xFFFF)</span><span class="token comment" spellcheck="true">/**  * @brief  延迟一段时间  * @param  延迟的时间长度  * @retval None  */</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">SDRAM_delay</span><span class="token punctuation">(</span>__IO uint32_t nCount<span class="token punctuation">)</span><span class="token punctuation">{</span>  __IO uint32_t index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token keyword">for</span><span class="token punctuation">(</span>index <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">100000</span> <span class="token operator">*</span> nCount<span class="token punctuation">)</span><span class="token punctuation">;</span> index <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span> index<span class="token operator">--</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**  * @brief  对SDRAM芯片进行初始化配置  * @param  None.   * @retval None.  */</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">SDRAM_InitSequence</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    uint32_t tmpr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Step 1 ----------------------------------------------------------------*/</span>    <span class="token comment" spellcheck="true">/* 配置命令：开启提供给SDRAM的时钟 */</span>    Command<span class="token punctuation">.</span>CommandMode <span class="token operator">=</span> FMC_SDRAM_CMD_CLK_ENABLE<span class="token punctuation">;</span>    Command<span class="token punctuation">.</span>CommandTarget <span class="token operator">=</span> FMC_COMMAND_TARGET_BANK<span class="token punctuation">;</span>    Command<span class="token punctuation">.</span>AutoRefreshNumber <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    Command<span class="token punctuation">.</span>ModeRegisterDefinition <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 发送配置命令 */</span>    <span class="token function">HAL_SDRAM_SendCommand</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sdramHandle<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Command<span class="token punctuation">,</span> SDRAM_TIMEOUT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Step 2: 延时100us */</span>     <span class="token function">SDRAM_delay</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Step 3 ----------------------------------------------------------------*/</span>    <span class="token comment" spellcheck="true">/* 配置命令：对所有的bank预充电 */</span>     Command<span class="token punctuation">.</span>CommandMode <span class="token operator">=</span> FMC_SDRAM_CMD_PALL<span class="token punctuation">;</span>    Command<span class="token punctuation">.</span>CommandTarget <span class="token operator">=</span> FMC_COMMAND_TARGET_BANK<span class="token punctuation">;</span>    Command<span class="token punctuation">.</span>AutoRefreshNumber <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    Command<span class="token punctuation">.</span>ModeRegisterDefinition <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 发送配置命令 */</span>    <span class="token function">HAL_SDRAM_SendCommand</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sdramHandle<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Command<span class="token punctuation">,</span> SDRAM_TIMEOUT<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">/* Step 4 ----------------------------------------------------------------*/</span>    <span class="token comment" spellcheck="true">/* 配置命令：自动刷新 */</span>       Command<span class="token punctuation">.</span>CommandMode <span class="token operator">=</span> FMC_SDRAM_CMD_AUTOREFRESH_MODE<span class="token punctuation">;</span>    Command<span class="token punctuation">.</span>CommandTarget <span class="token operator">=</span> FMC_COMMAND_TARGET_BANK<span class="token punctuation">;</span>    Command<span class="token punctuation">.</span>AutoRefreshNumber <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>    Command<span class="token punctuation">.</span>ModeRegisterDefinition <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 发送配置命令 */</span>    <span class="token function">HAL_SDRAM_SendCommand</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sdramHandle<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Command<span class="token punctuation">,</span> SDRAM_TIMEOUT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Step 5 ----------------------------------------------------------------*/</span>    <span class="token comment" spellcheck="true">/* 设置sdram寄存器配置 */</span>    tmpr <span class="token operator">=</span> <span class="token punctuation">(</span>uint32_t<span class="token punctuation">)</span>SDRAM_MODEREG_BURST_LENGTH_1          <span class="token operator">|</span>                   SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   <span class="token operator">|</span>                   SDRAM_MODEREG_CAS_LATENCY_3           <span class="token operator">|</span>                   SDRAM_MODEREG_OPERATING_MODE_STANDARD <span class="token operator">|</span>                   SDRAM_MODEREG_WRITEBURST_MODE_SINGLE<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 配置命令：设置SDRAM寄存器 */</span>    Command<span class="token punctuation">.</span>CommandMode <span class="token operator">=</span> FMC_SDRAM_CMD_LOAD_MODE<span class="token punctuation">;</span>    Command<span class="token punctuation">.</span>CommandTarget <span class="token operator">=</span> FMC_COMMAND_TARGET_BANK<span class="token punctuation">;</span>    Command<span class="token punctuation">.</span>AutoRefreshNumber <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    Command<span class="token punctuation">.</span>ModeRegisterDefinition <span class="token operator">=</span> tmpr<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 发送配置命令 */</span>    <span class="token function">HAL_SDRAM_SendCommand</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sdramHandle<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Command<span class="token punctuation">,</span> SDRAM_TIMEOUT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Step 6 ----------------------------------------------------------------*/</span>    <span class="token comment" spellcheck="true">/* 设置刷新计数器 */</span>    <span class="token comment" spellcheck="true">/* 刷新周期=64ms/8192行=7.8125us */</span>    <span class="token comment" spellcheck="true">/* COUNT=(7.8125us x Freq) - 20 */</span>    <span class="token comment" spellcheck="true">/* 设置自刷新速率 */</span>    <span class="token function">HAL_SDRAM_ProgramRefreshRate</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sdramHandle<span class="token punctuation">,</span> <span class="token number">824</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><h3 id="参考这篇博客"><a href="#参考这篇博客" class="headerlink" title="参考这篇博客"></a><a href="https://cloud.tencent.com/developer/article/1851969">参考这篇博客</a></h3><p>LTDC测试时先测试背景层显示是否正常，再初始化SDRAM测试图层，注意显存地址，黑屏表示SDRAM初始化存在问题，白屏正常再测试画点，画点存在问题说明FMC块配置存在问题。</p><p>DMA传输数据：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">dma2d_transfer_data_r2m</span><span class="token punctuation">(</span>uint32_t <span class="token operator">*</span>addr<span class="token punctuation">,</span> uint32_t xSize<span class="token punctuation">,</span> uint32_t ySize<span class="token punctuation">,</span> uint32_t offsetLine<span class="token punctuation">,</span> uint16_t color<span class="token punctuation">)</span><span class="token punctuation">{</span>    DMA2D<span class="token operator">-></span>CR <span class="token operator">=</span> DMA2D_R2M<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// dma2d mode: register to memory.</span>    DMA2D<span class="token operator">-></span>OPFCCR <span class="token operator">=</span> DMA2D_OUTPUT_RGB565<span class="token punctuation">;</span>    DMA2D<span class="token operator">-></span>OCOLR <span class="token operator">=</span> color<span class="token punctuation">;</span>    DMA2D<span class="token operator">-></span>OMAR <span class="token operator">=</span> <span class="token punctuation">(</span>uint32_t<span class="token punctuation">)</span>addr<span class="token punctuation">;</span>    DMA2D<span class="token operator">-></span>OOR <span class="token operator">=</span> offsetLine<span class="token punctuation">;</span>    DMA2D<span class="token operator">-></span>NLR <span class="token operator">=</span> <span class="token punctuation">(</span>uint32_t<span class="token punctuation">)</span><span class="token punctuation">(</span>xSize <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>uint16_t<span class="token punctuation">)</span>ySize<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    DMA2D->NLR = (uint32_t)(xSize * ySize);</span>        DMA2D<span class="token operator">-></span>CR <span class="token operator">|</span><span class="token operator">=</span> DMA2D_CR_START<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>DMA2D<span class="token operator">-></span>CR <span class="token operator">&amp;</span> DMA2D_CR_START<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">lcd_clear</span><span class="token punctuation">(</span>uint16_t color<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">dma2d_transfer_data_r2m</span><span class="token punctuation">(</span><span class="token punctuation">(</span>uint32_t <span class="token operator">*</span><span class="token punctuation">)</span>LCD_FRAME_BUFFER<span class="token punctuation">,</span> LCD_WIDTH<span class="token punctuation">,</span> LCD_HEIGHT<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> color<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    uint16_t *ptr = (uint16_t*)LCD_FRAME_BUFFER;</span><span class="token comment" spellcheck="true">//    uint32_t i = 0;</span><span class="token comment" spellcheck="true">//    while (i++ &lt; LCD_WIDTH*LCD_HEIGHT) {</span><span class="token comment" spellcheck="true">//        *(ptr+i) = color;</span><span class="token comment" spellcheck="true">//    }</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">lcd_draw_point</span><span class="token punctuation">(</span>uint16_t x<span class="token punctuation">,</span> uint16_t y<span class="token punctuation">,</span> uint16_t color<span class="token punctuation">)</span><span class="token punctuation">{</span>    uint32_t pos<span class="token punctuation">;</span>    uint16_t <span class="token operator">*</span>ptr<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// check position.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">></span> LCD_WIDTH <span class="token operator">||</span> y <span class="token operator">></span> LCD_HEIGHT<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// calculate the position offset in framebuffer.</span>    pos <span class="token operator">=</span> x <span class="token operator">+</span> y<span class="token operator">*</span>LCD_WIDTH<span class="token punctuation">;</span>    ptr <span class="token operator">=</span> <span class="token punctuation">(</span>uint16_t<span class="token operator">*</span><span class="token punctuation">)</span>LCD_FRAME_BUFFER<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// modify the framebuffer.</span>    <span class="token function">dma2d_transfer_data_r2m</span><span class="token punctuation">(</span><span class="token punctuation">(</span>uint32_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>ptr<span class="token operator">+</span>pos<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> color<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>LVGL移植：使用lvgl8.3.10，适配GUI GUIDER版本</p><p>在keil工程中新建lvgl组，将src目录下所有的c和h文件添加到该组中，注意是所有的c和h文件，包括子目录中的！</p><p><img src="https://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240716151004241.png" alt="image-20240716151004241"></p><p>在keil工程中新建lvgl_port组，将examples\porting中的disp和indev文件（显示屏和外设，文件系统未使用）和lvgl.h，lv_conf.h放在该组中：</p><p><img src="https://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240716190006606.png" alt="image-20240716190006606"></p><p>编译可能会出现的问题和解决方法（stderr断言缺失）：</p><p><img src="https://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240715110918750.png" alt="image-20240715110918750"></p><p>LVGL运行需要1ms心跳，FreeRTOS的频率为1000Hz正好为1ms，lvgl中有FreeRTOS钩子函数，需要在配置文件中打开，注意这里不要使用cubemx勾选，否则会创建一个新的钩子函数，重新生成工程时需要再配置一下。</p><p><img src="https://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240715161349234.png" alt="image-20240715161349234"></p><p>lv_port_disp.c实现画点函数：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">disp_flush</span><span class="token punctuation">(</span>lv_disp_drv_t <span class="token operator">*</span> disp_drv<span class="token punctuation">,</span> <span class="token keyword">const</span> lv_area_t <span class="token operator">*</span> area<span class="token punctuation">,</span> lv_color_t <span class="token operator">*</span> color_p<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>disp_flush_enabled<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/*The most simple case (but also the slowest) to put all pixels to the screen one-by-one*/</span>        int32_t x<span class="token punctuation">;</span>        int32_t y<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>y <span class="token operator">=</span> area<span class="token operator">-></span>y1<span class="token punctuation">;</span> y <span class="token operator">&lt;=</span> area<span class="token operator">-></span>y2<span class="token punctuation">;</span> y<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>x <span class="token operator">=</span> area<span class="token operator">-></span>x1<span class="token punctuation">;</span> x <span class="token operator">&lt;=</span> area<span class="token operator">-></span>x2<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">/*Put a pixel to the display. For example:*/</span>                <span class="token function">lcd_draw_point</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span> color_p<span class="token operator">-></span>full<span class="token punctuation">)</span><span class="token punctuation">;</span>                color_p<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*IMPORTANT!!!     *Inform the graphics library that you are ready with the flushing*/</span>    <span class="token function">lv_disp_flush_ready</span><span class="token punctuation">(</span>disp_drv<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>lv_port_indev.c实现触摸屏坐标读取，这里遇到一个坑，GT9157的寄存器地址和GT911一模一样，程序使用GT911：</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*Will be called by the library to read the touchpad*/</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">touchpad_read</span><span class="token punctuation">(</span>lv_indev_drv_t <span class="token operator">*</span> indev_drv<span class="token punctuation">,</span> lv_indev_data_t <span class="token operator">*</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">static</span> lv_coord_t last_x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> lv_coord_t last_y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*Save the pressed coordinates and the state*/</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">touchpad_is_pressed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token function">touchpad_get_xy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>last_x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>last_y<span class="token punctuation">)</span><span class="token punctuation">;</span>        data<span class="token operator">-></span>state <span class="token operator">=</span> LV_INDEV_STATE_PR<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        data<span class="token operator">-></span>state <span class="token operator">=</span> LV_INDEV_STATE_REL<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*Set the last pressed coordinates*/</span>    data<span class="token operator">-></span>point<span class="token punctuation">.</span>x <span class="token operator">=</span> last_x<span class="token punctuation">;</span>    data<span class="token operator">-></span>point<span class="token punctuation">.</span>y <span class="token operator">=</span> last_y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*Return true is the touchpad is pressed*/</span><span class="token keyword">static</span> bool <span class="token function">touchpad_is_pressed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    uint8_t temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*Your code comes here*/</span>    <span class="token function">GT911_ReadReg</span><span class="token punctuation">(</span>GT_GSTID_REG<span class="token punctuation">,</span> <span class="token operator">&amp;</span>temp<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">&amp;</span> <span class="token number">0x80</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>temp <span class="token operator">&amp;</span> <span class="token number">0x0F</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> true<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>        temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">GT911_WriteReg</span><span class="token punctuation">(</span>GT_GSTID_REG<span class="token punctuation">,</span> <span class="token operator">&amp;</span>temp<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ESP_LOGI(TAG, "temp=0x%X",temp);</span>     <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*Get the x and y coordinates if the touchpad is pressed*/</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">touchpad_get_xy</span><span class="token punctuation">(</span>lv_coord_t <span class="token operator">*</span> x<span class="token punctuation">,</span> lv_coord_t <span class="token operator">*</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*Your code comes here*/</span>    uint8_t data<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    u8 Data_length<span class="token punctuation">;</span>    u8 Read_buff<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">GT911_ReadReg</span><span class="token punctuation">(</span>GT_TP1_REG<span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0x0f</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">*</span>y <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0x0f</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> data<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">GT911_WriteReg</span><span class="token punctuation">(</span>GT_GSTID_REG<span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>最后打开显示和外设文件的开关，编译。</p><p><img src="https://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240716191727743.png" alt="image-20240716191727743"></p><p>如果存在#include “lvgl&#x2F;lvgl.h”报错，修改为#include “lvgl.h”</p><p>GUI GUIDER的移植只需要拷贝custom和generated文件夹，添加所有文件，头文件修改为#include “lvgl.h”，如果使用了其他图形插件，需要手动添加</p><p><img src="https://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240716192339242.png" alt="image-20240716192339242"></p><p>GUI GUIDER运行，先初始化lvgl，显示屏，外设，再初始化GUI，循环调用lv_timer_handler()处理函数：</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* USER CODE END Header_StartDefaultTask */</span><span class="token keyword">void</span> <span class="token function">StartDefaultTask</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>argument<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/* USER CODE BEGIN StartDefaultTask */</span>    <span class="token function">lv_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">lv_port_disp_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">lv_port_indev_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setup_ui</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>guider_ui<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">events_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>guider_ui<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* Infinite loop */</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">lv_timer_handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">osDelay</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/* USER CODE END StartDefaultTask */</span><span class="token punctuation">}</span></code></pre><h3 id="工程源码地址"><a href="#工程源码地址" class="headerlink" title="工程源码地址"></a><a href="https://github.com/ActorJing/STM32-LTDC-SDRAM-LVGL-RTOS">工程源码地址</a></h3><p>本工程生成时使用ARM V6编译器，官方cubemx生成直接使用v6编译器会报错，需要修改PACK包中的RTOS文件</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;野火H7PRO-RGB565屏幕-LTDC-SDRAM-DMA2D-FreeRTOS-LVGL&quot;&gt;&lt;a href=&quot;#野火H7PRO-RGB565屏幕-LTDC-SDRAM-DMA2D-FreeRTOS-LVGL&quot; class=&quot;headerlink&quot; title</summary>
      
    
    
    
    <category term="ARM嵌入式" scheme="https://actorjing.github.io/categories/ARM%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>使用Matlab进行信号处理</title>
    <link href="https://actorjing.github.io/2024/07/16/%E4%BD%BF%E7%94%A8Matlab%E8%BF%9B%E8%A1%8C%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86/"/>
    <id>https://actorjing.github.io/2024/07/16/%E4%BD%BF%E7%94%A8Matlab%E8%BF%9B%E8%A1%8C%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86/</id>
    <published>2024-07-16T12:43:04.000Z</published>
    <updated>2024-07-16T13:29:04.398Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用Matlab对单片机采样信号进行分析处理和滤波"><a href="#使用Matlab对单片机采样信号进行分析处理和滤波" class="headerlink" title="使用Matlab对单片机采样信号进行分析处理和滤波"></a>使用Matlab对单片机采样信号进行分析处理和滤波</h1><p>条件：单片机和PC在同一网段，可以使用wifi或者网卡，且已知单片机的信号采样率</p><p>单片机作为TCP客户端，matlab创建TCP服务端，等待客户端连接，读取指定数据量，程序如下：</p><pre class=" language-matlab"><code class="language-matlab">IP <span class="token operator">=</span> <span class="token string">'192.168.2.3'</span><span class="token punctuation">;</span>PORT <span class="token operator">=</span> <span class="token number">6802</span><span class="token punctuation">;</span>SampleCount <span class="token operator">=</span> <span class="token number">10200</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">% 4字节float类型</span>t_server <span class="token operator">=</span> <span class="token function">tcpserver</span><span class="token punctuation">(</span>IP<span class="token punctuation">,</span> PORT<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fopen</span><span class="token punctuation">(</span>t_server<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">% 初始化一个空数组用于存储读取的数据</span>data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">% 检查是否有可用的数据</span>    <span class="token keyword">if</span> t_server<span class="token punctuation">.</span>BytesAvailable <span class="token operator">>=</span> <span class="token number">4</span><span class="token operator">*</span>SampleCount <span class="token comment" spellcheck="true">% 每次读取4个字节，总共需要读取10次</span>        <span class="token comment" spellcheck="true">% 读取数据并转换为float类型</span>        <span class="token keyword">for</span> <span class="token number">i</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">:</span>SampleCount            data_recv <span class="token operator">=</span> <span class="token function">fread</span><span class="token punctuation">(</span>t_server<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'uint8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">% 将读取的数据添加到数组中</span>            data <span class="token operator">=</span> <span class="token punctuation">[</span>data<span class="token punctuation">;</span> <span class="token function">str2double</span><span class="token punctuation">(</span><span class="token function">char</span><span class="token punctuation">(</span>data_recv<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">end</span><span class="token keyword">end</span><span class="token function">plot</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">delete</span><span class="token punctuation">(</span>t_server<span class="token punctuation">)</span><span class="token punctuation">;</span>  </code></pre><p>该程序指定服务端IP为192.168.2.3，端口为6802，获取10200个数据</p><h3 id="注意：字节直接转换float存在问题，先转换成字符串再转换为浮点数正常"><a href="#注意：字节直接转换float存在问题，先转换成字符串再转换为浮点数正常" class="headerlink" title="注意：字节直接转换float存在问题，先转换成字符串再转换为浮点数正常"></a>注意：字节直接转换float存在问题，先转换成字符串再转换为浮点数正常</h3><p>对采样信号进行傅里叶变换，获取噪声的频率：</p><pre class=" language-matlab"><code class="language-matlab">clcclose all<span class="token punctuation">;</span>clear<span class="token punctuation">;</span><span class="token comment" spellcheck="true">% 加载data.mat文件</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">'data.mat'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">% 绘制data变量的图形</span><span class="token function">plot</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">% 生成信号</span>Fs <span class="token operator">=</span> <span class="token number">1025.390625</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">% 采样频率</span>N <span class="token operator">=</span> <span class="token number">10200</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">% 采样数</span>t <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">:</span>N<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">/</span>Fs<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">% 时间向量</span>f <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">:</span>N<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>Fs<span class="token operator">/</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">% 频率向量</span><span class="token comment" spellcheck="true">% 进行傅里叶变换</span>Y <span class="token operator">=</span> <span class="token function">fft</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">% 计算双边频谱</span>P2 <span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span>Y<span class="token operator">/</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">% 计算单边频谱</span>P1 <span class="token operator">=</span> <span class="token function">P2</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span>N<span class="token operator">/</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">P1</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">:</span><span class="token keyword">end</span><span class="token number">-1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span><span class="token function">P1</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">:</span><span class="token keyword">end</span><span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">% 绘制频域图</span>figure<span class="token punctuation">;</span><span class="token function">plot</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span>N<span class="token operator">/</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> P1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">xlabel</span><span class="token punctuation">(</span><span class="token string">'Frequency (Hz)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ylabel</span><span class="token punctuation">(</span><span class="token string">'Amplitude'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'Frequency Domain of Data'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>根据噪声频率设计陷波滤波器：</p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240716211651987.png" alt="image-20240716211651987"></p><p>实现模型，一定要勾选使用基本元素构建模型：</p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240716212523449.png" alt="image-20240716212523449"></p><p>双击模型展开可以看到具体实现函数，-1表示上一刻值，K表示乘积：</p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240716212733675.png" alt="image-20240716212733675"></p><p>根据函数和参数，使用代码实现即可实现滤波。</p><h1 id="Matlab源码地址"><a href="#Matlab源码地址" class="headerlink" title="Matlab源码地址"></a><a href="https://github.com/ActorJing/MatlabFFT/tree/main/MatlabFFT">Matlab源码地址</a></h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;使用Matlab对单片机采样信号进行分析处理和滤波&quot;&gt;&lt;a href=&quot;#使用Matlab对单片机采样信号进行分析处理和滤波&quot; class=&quot;headerlink&quot; title=&quot;使用Matlab对单片机采样信号进行分析处理和滤波&quot;&gt;&lt;/a&gt;使用Matlab对单片</summary>
      
    
    
    
    <category term="算法" scheme="https://actorjing.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>MDK使用ARMV6编译器</title>
    <link href="https://actorjing.github.io/2024/07/16/MDK%E4%BD%BF%E7%94%A8ARMV6%E7%BC%96%E8%AF%91%E5%99%A8/"/>
    <id>https://actorjing.github.io/2024/07/16/MDK%E4%BD%BF%E7%94%A8ARMV6%E7%BC%96%E8%AF%91%E5%99%A8/</id>
    <published>2024-07-16T12:27:23.000Z</published>
    <updated>2024-07-16T12:36:15.636Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MDK使用ARMV6编译器"><a href="#MDK使用ARMV6编译器" class="headerlink" title="MDK使用ARMV6编译器"></a>MDK使用ARMV6编译器</h1><p><img src="https://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240704111741793.png" alt="image-20240704111741793"></p><p><img src="https://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240704111835944.png" alt="image-20240704111835944"></p><p>替换FreeRTOS文件：</p><p><img src="https://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240704122309031.png" alt="image-20240704122309031"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MDK使用ARMV6编译器&quot;&gt;&lt;a href=&quot;#MDK使用ARMV6编译器&quot; class=&quot;headerlink&quot; title=&quot;MDK使用ARMV6编译器&quot;&gt;&lt;/a&gt;MDK使用ARMV6编译器&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://wochaoai</summary>
      
    
    
    
    <category term="ARM嵌入式" scheme="https://actorjing.github.io/categories/ARM%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>Typero连接阿里云oss</title>
    <link href="https://actorjing.github.io/2024/07/16/typero%E8%BF%9E%E6%8E%A5%E9%98%BF%E9%87%8C%E4%BA%91oss/"/>
    <id>https://actorjing.github.io/2024/07/16/typero%E8%BF%9E%E6%8E%A5%E9%98%BF%E9%87%8C%E4%BA%91oss/</id>
    <published>2024-07-16T12:27:23.000Z</published>
    <updated>2024-07-20T09:22:15.913Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Typero连接阿里云oss"><a href="#Typero连接阿里云oss" class="headerlink" title="Typero连接阿里云oss"></a>Typero连接阿里云oss</h1><p><img src="https://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240704110359388.png" alt="image-20240704111741793"></p><p><img src="https://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240704110456883.png" alt="image-20240704111741793"></p><p><img src="https://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240704110619298.png" alt="image-20240704111741793"></p><p><img src="https://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240704110907292.png" alt="image-20240704111741793"></p><p><img src="https://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240704111129928.png" alt="image-20240704111741793"></p><p><img src="https://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240704111312585.png" alt="image-20240704111741793"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Typero连接阿里云oss&quot;&gt;&lt;a href=&quot;#Typero连接阿里云oss&quot; class=&quot;headerlink&quot; title=&quot;Typero连接阿里云oss&quot;&gt;&lt;/a&gt;Typero连接阿里云oss&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://woch</summary>
      
    
    
    
    <category term="杂项" scheme="https://actorjing.github.io/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
  </entry>
  
  <entry>
    <title>储能一次调频方案</title>
    <link href="https://actorjing.github.io/2024/07/07/%E5%82%A8%E8%83%BD%E4%B8%80%E6%AC%A1%E8%B0%83%E9%A2%91%E6%96%B9%E6%A1%88/"/>
    <id>https://actorjing.github.io/2024/07/07/%E5%82%A8%E8%83%BD%E4%B8%80%E6%AC%A1%E8%B0%83%E9%A2%91%E6%96%B9%E6%A1%88/</id>
    <published>2024-07-07T14:12:34.000Z</published>
    <updated>2024-07-07T14:17:41.059Z</updated>
    
    
    
    
    <category term="论文" scheme="https://actorjing.github.io/categories/%E8%AE%BA%E6%96%87/"/>
    
    
  </entry>
  
  <entry>
    <title>储能一次调频文献</title>
    <link href="https://actorjing.github.io/2024/07/07/%E5%82%A8%E8%83%BD%E4%B8%80%E6%AC%A1%E8%B0%83%E9%A2%91%E6%96%87%E7%8C%AE/"/>
    <id>https://actorjing.github.io/2024/07/07/%E5%82%A8%E8%83%BD%E4%B8%80%E6%AC%A1%E8%B0%83%E9%A2%91%E6%96%87%E7%8C%AE/</id>
    <published>2024-07-07T13:26:37.000Z</published>
    <updated>2024-07-10T12:43:44.158Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基于储能系统多重约束的一次调频策略-梁继业"><a href="#基于储能系统多重约束的一次调频策略-梁继业" class="headerlink" title="基于储能系统多重约束的一次调频策略_梁继业"></a><a href="https://wujingebook.netlify.app/web/viewer.html?file=https://wujingebook.netlify.app/ebook/%E5%9F%BA%E4%BA%8E%E5%82%A8%E8%83%BD%E7%B3%BB%E7%BB%9F%E5%A4%9A%E9%87%8D%E7%BA%A6%E6%9D%9F%E7%9A%84%E4%B8%80%E6%AC%A1%E8%B0%83%E9%A2%91%E7%AD%96%E7%95%A5_%E6%A2%81%E7%BB%A7%E4%B8%9A.pdf">基于储能系统多重约束的一次调频策略_梁继业</a></h1><h1 id="火电-储能一体化系统参与一次调频的方法研究-宋辉"><a href="#火电-储能一体化系统参与一次调频的方法研究-宋辉" class="headerlink" title="火电-储能一体化系统参与一次调频的方法研究_宋辉"></a><a href="https://wujingebook.netlify.app/web/viewer.html?file=https://wujingebook.netlify.app/ebook/%E7%81%AB%E7%94%B5-%E5%82%A8%E8%83%BD%E4%B8%80%E4%BD%93%E5%8C%96%E7%B3%BB%E7%BB%9F%E5%8F%82%E4%B8%8E%E4%B8%80%E6%AC%A1%E8%B0%83%E9%A2%91%E7%9A%84%E6%96%B9%E6%B3%95%E7%A0%94%E7%A9%B6_%E5%AE%8B%E8%BE%89.pdf">火电-储能一体化系统参与一次调频的方法研究_宋辉</a></h1><h1 id="考虑SOC的电池储能系统一次调频策略研究-刘英培"><a href="#考虑SOC的电池储能系统一次调频策略研究-刘英培" class="headerlink" title="考虑SOC的电池储能系统一次调频策略研究_刘英培"></a><a href="https://wujingebook.netlify.app/web/viewer.html?file=https://wujingebook.netlify.app/ebook/%E8%80%83%E8%99%91SOC%E7%9A%84%E7%94%B5%E6%B1%A0%E5%82%A8%E8%83%BD%E7%B3%BB%E7%BB%9F%E4%B8%80%E6%AC%A1%E8%B0%83%E9%A2%91%E7%AD%96%E7%95%A5%E7%A0%94%E7%A9%B6_%E5%88%98%E8%8B%B1%E5%9F%B9.pdf">考虑SOC的电池储能系统一次调频策略研究_刘英培</a></h1><h1 id="计及SOC的电池储能系统一次调频自适应综合控制策略-王育飞"><a href="#计及SOC的电池储能系统一次调频自适应综合控制策略-王育飞" class="headerlink" title="计及SOC的电池储能系统一次调频自适应综合控制策略_王育飞"></a><a href="https://wujingebook.netlify.app/web/viewer.html?file=https://wujingebook.netlify.app/ebook/%E8%AE%A1%E5%8F%8ASOC%E7%9A%84%E7%94%B5%E6%B1%A0%E5%82%A8%E8%83%BD%E7%B3%BB%E7%BB%9F%E4%B8%80%E6%AC%A1%E8%B0%83%E9%A2%91%E8%87%AA%E9%80%82%E5%BA%94%E7%BB%BC%E5%90%88%E6%8E%A7%E5%88%B6%E7%AD%96%E7%95%A5_%E7%8E%8B%E8%82%B2%E9%A3%9E.pdf">计及SOC的电池储能系统一次调频自适应综合控制策略_王育飞</a></h1><h1 id="计及SOC的电池储能系统一次调频自适应综合控制策略附录"><a href="#计及SOC的电池储能系统一次调频自适应综合控制策略附录" class="headerlink" title="计及SOC的电池储能系统一次调频自适应综合控制策略附录"></a><a href="https://wujingebook.netlify.app/web/viewer.html?file=https://wujingebook.netlify.app/ebook/%E8%AE%A1%E5%8F%8ASOC%E7%9A%84%E7%94%B5%E6%B1%A0%E5%82%A8%E8%83%BD%E7%B3%BB%E7%BB%9F%E4%B8%80%E6%AC%A1%E8%B0%83%E9%A2%91%E8%87%AA%E9%80%82%E5%BA%94%E7%BB%BC%E5%90%88%E6%8E%A7%E5%88%B6%E7%AD%96%E7%95%A5%E9%99%84%E5%BD%95.pdf">计及SOC的电池储能系统一次调频自适应综合控制策略附录</a></h1><h1 id="基于SOC分区的蓄电池储能辅助热电机组调频控制策略研究"><a href="#基于SOC分区的蓄电池储能辅助热电机组调频控制策略研究" class="headerlink" title="基于SOC分区的蓄电池储能辅助热电机组调频控制策略研究"></a><a href="https://wujingebook.netlify.app/web/viewer.html?file=https://wujingebook.netlify.app/ebook/%E5%9F%BA%E4%BA%8ESOC%E5%88%86%E5%8C%BA%E7%9A%84%E8%93%84%E7%94%B5%E6%B1%A0%E5%82%A8%E8%83%BD%E8%BE%85%E5%8A%A9%E7%83%AD%E7%94%B5%E6%9C%BA%E7%BB%84%E8%B0%83%E9%A2%91%E6%8E%A7%E5%88%B6%E7%AD%96%E7%95%A5%E7%A0%94%E7%A9%B6.pdf">基于SOC分区的蓄电池储能辅助热电机组调频控制策略研究</a></h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基于储能系统多重约束的一次调频策略-梁继业&quot;&gt;&lt;a href=&quot;#基于储能系统多重约束的一次调频策略-梁继业&quot; class=&quot;headerlink&quot; title=&quot;基于储能系统多重约束的一次调频策略_梁继业&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://wujing</summary>
      
    
    
    
    <category term="论文" scheme="https://actorjing.github.io/categories/%E8%AE%BA%E6%96%87/"/>
    
    
  </entry>
  
  <entry>
    <title>cubeMX使用LwIP</title>
    <link href="https://actorjing.github.io/2024/07/06/cubeMX%E4%BD%BF%E7%94%A8LwIP/"/>
    <id>https://actorjing.github.io/2024/07/06/cubeMX%E4%BD%BF%E7%94%A8LwIP/</id>
    <published>2024-07-06T15:27:23.000Z</published>
    <updated>2024-07-06T15:36:55.126Z</updated>
    
    <content type="html"><![CDATA[<h2 id="cubeMX配置："><a href="#cubeMX配置：" class="headerlink" title="cubeMX配置："></a>cubeMX配置：</h2><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240706233501114.png" alt="image-20240706233501114"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;cubeMX配置：&quot;&gt;&lt;a href=&quot;#cubeMX配置：&quot; class=&quot;headerlink&quot; title=&quot;cubeMX配置：&quot;&gt;&lt;/a&gt;cubeMX配置：&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://wochaoaidahaide.oss-cn-be</summary>
      
    
    
    
    <category term="ARM嵌入式" scheme="https://actorjing.github.io/categories/ARM%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>笔记上传步骤</title>
    <link href="https://actorjing.github.io/2024/07/06/%E7%AC%94%E8%AE%B0%E4%B8%8A%E4%BC%A0%E6%AD%A5%E9%AA%A4/"/>
    <id>https://actorjing.github.io/2024/07/06/%E7%AC%94%E8%AE%B0%E4%B8%8A%E4%BC%A0%E6%AD%A5%E9%AA%A4/</id>
    <published>2024-07-06T14:58:34.000Z</published>
    <updated>2024-07-06T15:13:57.287Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、pdf文档放在book-ebook目录下，同步git"><a href="#1、pdf文档放在book-ebook目录下，同步git" class="headerlink" title="1、pdf文档放在book&#x2F;ebook目录下，同步git"></a>1、pdf文档放在book&#x2F;ebook目录下，同步git</h3><h3 id="2、hexo创建笔记，上传git"><a href="#2、hexo创建笔记，上传git" class="headerlink" title="2、hexo创建笔记，上传git"></a>2、hexo创建笔记，上传git</h3><h3 id="3、将整个hexoblog工程同步git"><a href="#3、将整个hexoblog工程同步git" class="headerlink" title="3、将整个hexoblog工程同步git"></a>3、将整个hexoblog工程同步git</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1、pdf文档放在book-ebook目录下，同步git&quot;&gt;&lt;a href=&quot;#1、pdf文档放在book-ebook目录下，同步git&quot; class=&quot;headerlink&quot; title=&quot;1、pdf文档放在book&amp;#x2F;ebook目录下，同步git&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="笔记上传" scheme="https://actorjing.github.io/categories/%E7%AC%94%E8%AE%B0%E4%B8%8A%E4%BC%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>工作日志</title>
    <link href="https://actorjing.github.io/2024/07/05/%E5%B7%A5%E4%BD%9C%E6%97%A5%E5%BF%97/"/>
    <id>https://actorjing.github.io/2024/07/05/%E5%B7%A5%E4%BD%9C%E6%97%A5%E5%BF%97/</id>
    <published>2024-07-05T13:57:10.000Z</published>
    <updated>2024-07-10T14:33:08.854Z</updated>
    
    <content type="html"><![CDATA[<h3 id="3-19"><a href="#3-19" class="headerlink" title="3.19"></a>3.19</h3><p>搭建环境<br>同步器程序设计</p><h3 id="3-20"><a href="#3-20" class="headerlink" title="3.20"></a>3.20</h3><p>同步器程序调试</p><p>发送多路同步脉冲出，单脉冲，持续脉冲</p><h3 id="3-21"><a href="#3-21" class="headerlink" title="3.21"></a>3.21</h3><p>同步器程序完成<br>压力手掌分布接口布线<br>鞋垫FPC接口设计</p><h3 id="3-22"><a href="#3-22" class="headerlink" title="3.22"></a>3.22</h3><p>足底采集电路布线完成<br>鞋垫接口测试</p><h3 id="3-25"><a href="#3-25" class="headerlink" title="3.25"></a>3.25</h3><p>fpc连接接口设计完成<br>ADC采集程序调试</p><p>右脚16pin在上</p><h3 id="3-26"><a href="#3-26" class="headerlink" title="3.26"></a>3.26</h3><p>-电路设计ADC电容尽量靠近单片机，ADC芯片到单片机的输入输出高阻抗，中间走线尽可能短<br>-adc走线需要注意下电流<br>-退藕电容尽量靠近芯片引脚<br>-AGND和GND需要分离，使用磁珠</p><p>足底连接接口打板<br>调试adc采集程序</p><h3 id="3-27"><a href="#3-27" class="headerlink" title="3.27"></a>3.27</h3><p>adc采集程序移植完成<br>学习STM32H7</p><h3 id="3-28"><a href="#3-28" class="headerlink" title="3.28"></a>3.28</h3><p>学习STM32H7 ADC DMA DAC</p><h3 id="3-29"><a href="#3-29" class="headerlink" title="3.29"></a>3.29</h3><p>学习STM32H7 IIC CAN</p><h3 id="4-1"><a href="#4-1" class="headerlink" title="4.1"></a>4.1</h3><p>搭建ESP32环境<br>熟悉足底压力程序</p><h3 id="4-2"><a href="#4-2" class="headerlink" title="4.2"></a>4.2</h3><p>调试足底压力程序<br>加入WIFI信号强度检测</p><h3 id="4-3"><a href="#4-3" class="headerlink" title="4.3"></a>4.3</h3><p>调试足底压力adc采集逻辑</p><h3 id="4-7-8"><a href="#4-7-8" class="headerlink" title="4.7-8"></a>4.7-8</h3><p>足底程序编写完成</p><h3 id="4-9-4-16"><a href="#4-9-4-16" class="headerlink" title="4.9-4.16"></a>4.9-4.16</h3><p>测力台PCB设计完成<br>重焊足底上板ADC芯片</p><p>AD 3.3VA还没有解决 ADC加滤波</p><h3 id="4-17"><a href="#4-17" class="headerlink" title="4.17"></a>4.17</h3><p>重焊足底上板ADC芯片，修好18片，一片不稳定（加热后第一次采集正常，之后全是0，可能出现FF），一片元件缺失<br>测力台原理图更新，新增三色灯柱，急停开关，电机和传感器减少为16个</p><h3 id="4-18"><a href="#4-18" class="headerlink" title="4.18"></a>4.18</h3><p>PCB设计完成打样<br>三色灯柱、急停开关选型</p><p>等待电路板的几天在学习步进电机驱动和LVGL</p><h3 id="4-28"><a href="#4-28" class="headerlink" title="4.28"></a>4.28</h3><p>完成步进电机加速到匀速过程，采用T型加减速<br>adc采集未触发IO中断</p><h3 id="4-29-30"><a href="#4-29-30" class="headerlink" title="4.29-30"></a>4.29-30</h3><p>ADC外部中断触发正常，spi读取正常，写入存在问题<br>spi写入MCP3914寄存器存在问题，读取寄存器数据全部为FF，读取adc正常</p><h3 id="5-6"><a href="#5-6" class="headerlink" title="5.6"></a>5.6</h3><p>调试spi，使用逻辑分析仪查看数据正常<br>低速写入同样存在问题</p><h3 id="5-7"><a href="#5-7" class="headerlink" title="5.7"></a>5.7</h3><p>spi写入仍然存在问题，怀疑芯片上锁，boost配置问题，检查后仍然写入失败<br>调试过程板子烧了，单独供电3.3V，3A红外测温发现STM32单片机烧了<br>更换了单片机，adc只有第一次数据正常，后面保持不变，DR引脚触发正常，怀疑adc芯片也烧坏了，无多余芯片，未更换，调试备用板</p><h3 id="5-8"><a href="#5-8" class="headerlink" title="5.8"></a>5.8</h3><p>spi问题未解决，重新配置adc的时钟为1.05M<br>adc采样频率为1050000&#x2F;4&#x2F;256&#x3D;1025.390625Hz<br>人体触摸力传感器出现频率为50Hz的噪声，采用陷波滤波器</p><h3 id="5-9"><a href="#5-9" class="headerlink" title="5.9"></a>5.9</h3><p>测力台暂停<br>标定台电机工作电磁干扰adc，更换电机</p><h3 id="5-10"><a href="#5-10" class="headerlink" title="5.10"></a>5.10</h3><p>电机更换完成<br>学习DSP</p><h3 id="5-11"><a href="#5-11" class="headerlink" title="5.11"></a>5.11</h3><p>通过matlab建立tcp服务器，将adc数据发送到matlab<br>通过傅里叶变换，找到人体触摸传感器时的噪声频率，<br>通过matlab的滤波器设计功能，加入陷波滤波器，导出参数，对adc进行滤波，效果显著</p><h3 id="5-13"><a href="#5-13" class="headerlink" title="5.13"></a>5.13</h3><p>加入急停开关和三色灯柱接口<br>测力台程序基本开发完成<br>重构单独ADC采样程序，回到spi问题</p><h3 id="5-14"><a href="#5-14" class="headerlink" title="5.14"></a>5.14</h3><p>重构程序，找到spi写入adc错误原因<br>adc芯片RSTn引脚默认低电平，导致adc芯片未工作</p><h3 id="5-15-17"><a href="#5-15-17" class="headerlink" title="5.15-17"></a>5.15-17</h3><p>移植gui guider程序到esp32中<br>标定台mos烧了，修改电路，新增保险丝<br>保险丝型号C6165156</p><p>请假两天</p><h3 id="5-22"><a href="#5-22" class="headerlink" title="5.22"></a>5.22</h3><p>esp32lvgl运行，触摸屏驱动采用定时查询<br>机器人驱动器串口调试乱码</p><h3 id="5-23"><a href="#5-23" class="headerlink" title="5.23"></a>5.23</h3><p>板子到了，驱动信号线和使能反了，飞线测试程序正常运行，烧错程序导致烧了一块板子</p><h3 id="5-24"><a href="#5-24" class="headerlink" title="5.24"></a>5.24</h3><p>胶壳到了，给标定台压端子</p><h3 id="5-27"><a href="#5-27" class="headerlink" title="5.27"></a>5.27</h3><p>标定台维修完成，测试电机工作时温度45°，长时间工作无温升</p><h3 id="5-28-6-14"><a href="#5-28-6-14" class="headerlink" title="5.28-6.14"></a>5.28-6.14</h3><p>lvgl学习<br>guiguider学习</p><h3 id="6-17-6-21"><a href="#6-17-6-21" class="headerlink" title="6.17-6.21"></a>6.17-6.21</h3><p>腕力传感器协调<br>出现的问题和总结：<br>板对板连接器焊接保留沉金<br>使用可调电源供电时，设备功率大约在1W，46V供电初始电流尽可能小，怀疑电流浪涌导致设备烧毁5台<br>熟悉放大器，调零电阻</p><h3 id="6-22-加班"><a href="#6-22-加班" class="headerlink" title="6.22 加班"></a>6.22 加班</h3><p>腕力传感器标定<br>软件设置adc量程错误，采样adc值超调，调整放大电阻还得调回去，等待软件修复</p><h3 id="6-24"><a href="#6-24" class="headerlink" title="6.24"></a>6.24</h3><p>软件修复，换回放大电阻<br>标定3台设备<br>编写生产文档，和生产协调标定过程</p><h3 id="6-25"><a href="#6-25" class="headerlink" title="6.25"></a>6.25</h3><p>和生产一起标定一台传感器<br>文档上传<br>医院项目电机商量，测试直线电机驱动器，使用官方调试线仍然通信失败，更换直线电机<br>项目屏幕使用串口屏，购买屏幕测试</p><p>&#x2F;**********************************<br>期间调试keil时，lvgl工程文件太多，编译实在太慢，更换V6编译器，使用lwip时出现的问题：</p><p>使用V6编译器编译rtos项目时需要更换库路径，lwip需要更换cc.h文件下宏定义：<br>&#x2F;&#x2F;#if defined (<strong>GNUC</strong>) &amp; !defined (__CC_ARM)<br>#if defined (<strong>GNUC</strong>) &amp;&amp; !defined (__CC_ARM) &amp;&amp; !(defined(__ARMCC_VERSION) &amp;&amp; (__ARMCC_VERSION &gt;&#x3D; 6010050))</p><p><a href="https://blog.csdn.net/qq_44642831/article/details/116303460">https://blog.csdn.net/qq_44642831/article/details/116303460</a><br>lwip.c</p><p>lwip移植成功，电脑无法ping通<br>原因是编译时未勾选 use microlib（具体原因不清楚）<br>***********************************&#x2F;</p><h3 id="6-26-6-28"><a href="#6-26-6-28" class="headerlink" title="6.26-6.28"></a>6.26-6.28</h3><p>屏幕驱动移植<br>ST7796<br>屏幕一直无法点亮，使用逻辑分析仪查看SPI发送的数据正常，时序正常，使用的是野火电机开发板<br>购买原厂底板准备测试</p><h3 id="7-1"><a href="#7-1" class="headerlink" title="7.1"></a>7.1</h3><p>原厂底板测试屏幕正常，使用逻辑分析仪看底板SPI数据和我的程序对应的数据一模一样<br>屏幕接回自己的板子仍然点不亮，<br>无疑按下复位，屏幕点亮<br>（没有找到原因，板子重启，重新下载程序无法直接点亮屏幕且led线程工作正常，必须手动按一下复位按键才能点亮屏幕，简直玄学！！！）<br>触摸驱动移植成功GT911</p><h3 id="7-2"><a href="#7-2" class="headerlink" title="7.2"></a>7.2</h3><p>跑台电机驱动协议分析<br>使用逻辑分析仪监听跑台控制板向电机驱动发送的指令<br>破解成功坡道角度控制，电机速度控制<br>（最后找到商家，拿到了协议文档）</p><h3 id="7-3"><a href="#7-3" class="headerlink" title="7.3"></a>7.3</h3><p>lvgl移植成功<br>屏幕刷新率3s一帧，SPI的速度为21M<br>无法满足要求，更换并口屏幕测试</p><h3 id="7-4-7-5"><a href="#7-4-7-5" class="headerlink" title="7.4-7.5"></a>7.4-7.5</h3><p>使用H7测试并口屏</p><p>LTDC驱动移植成功</p><p>（遇到的问题：测试时屏幕显示又两层，只开启了一层导致显示被第二层覆盖，以为驱动移植存在问题）</p><p>FFT变换同振幅多频率叠加时，频域图振幅错误</p><h3 id="7-8-7-9"><a href="#7-8-7-9" class="headerlink" title="7.8-7.9"></a>7.8-7.9</h3><p>足底压力传感器adc采样出现满偏情况，检查发现adc数据是int类型，不是满偏是-1</p><p>adc芯片使用MCP3914，差分输入，最高位为符号位</p><h3 id="7-10"><a href="#7-10" class="headerlink" title="7.10"></a>7.10</h3><p>足底PCB整合，和软件协调传感器点位</p><p>RGB屏幕验证成功，使用LTDC+DMA2D，使用SDRAM时存在问题，需要软件一直刷新，怀疑配置自动刷新存在问题</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;3-19&quot;&gt;&lt;a href=&quot;#3-19&quot; class=&quot;headerlink&quot; title=&quot;3.19&quot;&gt;&lt;/a&gt;3.19&lt;/h3&gt;&lt;p&gt;搭建环境&lt;br&gt;同步器程序设计&lt;/p&gt;
&lt;h3 id=&quot;3-20&quot;&gt;&lt;a href=&quot;#3-20&quot; class=&quot;heade</summary>
      
    
    
    
    <category term="工作日志" scheme="https://actorjing.github.io/categories/%E5%B7%A5%E4%BD%9C%E6%97%A5%E5%BF%97/"/>
    
    
  </entry>
  
  <entry>
    <title>2024-2-15东至县城</title>
    <link href="https://actorjing.github.io/2024/02/15/2024-2-15%E4%B8%9C%E8%87%B3%E5%8E%BF%E5%9F%8E/"/>
    <id>https://actorjing.github.io/2024/02/15/2024-2-15%E4%B8%9C%E8%87%B3%E5%8E%BF%E5%9F%8E/</id>
    <published>2024-02-15T02:41:49.000Z</published>
    <updated>2024-07-05T16:06:46.839Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_5401.jpg" alt="DSC_5401"></p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_5355.jpg" alt="DSC_5355"></p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_5372.jpg" alt="DSC_5372"></p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_5347.jpg" alt="DSC_5347"></p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_5335.jpg" alt="DSC_5335"></p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_5345.jpg" alt="DSC_5345"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_5401.jpg&quot; alt=&quot;DSC_5401&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://wochaoaidahaide.os</summary>
      
    
    
    
    <category term="摄影日记" scheme="https://actorjing.github.io/categories/%E6%91%84%E5%BD%B1%E6%97%A5%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>嵌入式Linux6-UART串口</title>
    <link href="https://actorjing.github.io/2024/02/06/%E5%B5%8C%E5%85%A5%E5%BC%8FLinux6-UART%E4%B8%B2%E5%8F%A3/"/>
    <id>https://actorjing.github.io/2024/02/06/%E5%B5%8C%E5%85%A5%E5%BC%8FLinux6-UART%E4%B8%B2%E5%8F%A3/</id>
    <published>2024-02-06T15:09:33.000Z</published>
    <updated>2024-07-05T16:06:02.836Z</updated>
    
    <content type="html"><![CDATA[<h1 id="UART串口"><a href="#UART串口" class="headerlink" title="UART串口"></a>UART串口</h1><hr><h2 id="1、UART串口配置结构体"><a href="#1、UART串口配置结构体" class="headerlink" title="1、UART串口配置结构体"></a>1、UART串口配置结构体</h2><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> termios  <span class="token punctuation">{</span>    tcflag_t c_iflag<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* input mode flags */</span>    tcflag_t c_oflag<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* output mode flags */</span>    tcflag_t c_cflag<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* control mode flags */</span>    tcflag_t c_lflag<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* local mode flags */</span>    cc_t c_line<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* line discipline */</span>    cc_t c_cc<span class="token punctuation">[</span>NCCS<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* control characters */</span>    speed_t c_ispeed<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* input speed */</span>    speed_t c_ospeed<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* output speed */</span><span class="token macro property">#<span class="token directive keyword">define</span> _HAVE_STRUCT_TERMIOS_C_ISPEED 1</span><span class="token macro property">#<span class="token directive keyword">define</span> _HAVE_STRUCT_TERMIOS_C_OSPEED 1</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>串口属于一种终端设备，除此之外还包括常见的ssh等，它们都遵循终端统一的结构体termios，</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;UART串口&quot;&gt;&lt;a href=&quot;#UART串口&quot; class=&quot;headerlink&quot; title=&quot;UART串口&quot;&gt;&lt;/a&gt;UART串口&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;1、UART串口配置结构体&quot;&gt;&lt;a href=&quot;#1、UART串口配置结构体&quot; clas</summary>
      
    
    
    
    <category term="Linux嵌入式学习" scheme="https://actorjing.github.io/categories/Linux%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux嵌入式5-FrameBuffer应用编程</title>
    <link href="https://actorjing.github.io/2024/01/31/Linux%E5%B5%8C%E5%85%A5%E5%BC%8F5-FrameBuffer%E5%BA%94%E7%94%A8%E7%BC%96%E7%A8%8B/"/>
    <id>https://actorjing.github.io/2024/01/31/Linux%E5%B5%8C%E5%85%A5%E5%BC%8F5-FrameBuffer%E5%BA%94%E7%94%A8%E7%BC%96%E7%A8%8B/</id>
    <published>2024-01-31T03:49:08.000Z</published>
    <updated>2024-07-05T16:06:08.231Z</updated>
    
    <content type="html"><![CDATA[<h1 id="FrameBuffer应用编程"><a href="#FrameBuffer应用编程" class="headerlink" title="FrameBuffer应用编程"></a>FrameBuffer应用编程</h1><h2 id="1、内存映射"><a href="#1、内存映射" class="headerlink" title="1、内存映射"></a>1、内存映射</h2><p>用户程序操作文件的一般方式为调用系统库函数（open，read，write），库函数的流程为拷贝用户数据空间，到内核空间，获取文件句柄，返回用户空间，操作文件时，使用句柄到内核空间找到文件进行修改，每一次操作都是如此。用户空间和内核空间的机制导致数据传输速度不能最大，于是采用<strong>内存映射</strong>的方式。</p><p>用户程序可以直接访问内存，内存映射是在内存中申请空间对应物理文件，修改内存的数据会自动同步到物理文件，注意这个同步不是及时的，仍由内核调用，使用open这种库函数也不是及时同步，都是由内核调用同步，内存映射返回的是一个指针，可以直接访问和修改内容。</p><h2 id="2、LCD应用编程流程"><a href="#2、LCD应用编程流程" class="headerlink" title="2、LCD应用编程流程"></a>2、LCD应用编程流程</h2><ul><li>打开&#x2F;dev&#x2F;fdX设备文件</li><li>使用ioctl函数读取LCD参数信息</li><li>使用存储映射的方式将屏幕显示缓冲区映射到用户空间</li><li>直接读写显示缓冲区进行绘图和显示</li><li>完成显示后关闭存储映射，关闭设备文件</li></ul><h2 id="3、属性结构体介绍"><a href="#3、属性结构体介绍" class="headerlink" title="3、属性结构体介绍"></a>3、属性结构体介绍</h2><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//显示设备的可变参数参数-一般表示显示屏显示大小，不变参数一般指硬件属性，比如缓冲区宽度</span><span class="token keyword">struct</span> fb_var_screeninfo <span class="token punctuation">{</span>    __u32 xres<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* visible resolution*/</span>    __u32 yres<span class="token punctuation">;</span>    __u32 xres_virtual<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* virtual resolution*/</span>    __u32 yres_virtual<span class="token punctuation">;</span>    __u32 xoffset<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* offset from virtual to visible */</span>    __u32 yoffset<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* resolution*/</span>    __u32 bits_per_pixel<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* guess what*/</span>    __u32 grayscale<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 0 = color, 1 = grayscale,*/</span>                    <span class="token comment" spellcheck="true">/* >1 = FOURCC*/</span>    <span class="token keyword">struct</span> fb_bitfield red<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* bitfield in fb mem if true color, */</span>    <span class="token keyword">struct</span> fb_bitfield green<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* else only length is significant */</span>    <span class="token keyword">struct</span> fb_bitfield blue<span class="token punctuation">;</span>    <span class="token keyword">struct</span> fb_bitfield transp<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* transparency*/</span>    __u32 nonstd<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* != 0 Non standard pixel format */</span>    __u32 activate<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* see FB_ACTIVATE_**/</span>    __u32 height<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* height of picture in mm    */</span>    __u32 width<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* width of picture in mm     */</span>    __u32 accel_flags<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* (OBSOLETE) see fb_info.flags */</span>    <span class="token comment" spellcheck="true">/* Timing: All values in pixclocks, except pixclock (of course) */</span>    __u32 pixclock<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* pixel clock in ps (pico seconds) */</span>    __u32 left_margin<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* time from sync to picture*/</span>    __u32 right_margin<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* time from picture to sync*/</span>    __u32 upper_margin<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* time from sync to picture*/</span>    __u32 lower_margin<span class="token punctuation">;</span>    __u32 hsync_len<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* length of horizontal sync*/</span>    __u32 vsync_len<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* length of vertical sync*/</span>    __u32 sync<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* see FB_SYNC_**/</span>    __u32 vmode<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* see FB_VMODE_**/</span>    __u32 rotate<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* angle we rotate counter clockwise */</span>    __u32 colorspace<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* colorspace for FOURCC-based modes */</span>    __u32 reserved<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* Reserved for future compatibility */</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//显示设备的固定参数</span><span class="token keyword">struct</span> fb_fix_screeninfo <span class="token punctuation">{</span>    <span class="token keyword">char</span> id<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* identification string eg "TT Builtin" */</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> smem_start<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* Start of frame buffer mem */</span>                    <span class="token comment" spellcheck="true">/* (physical address) */</span>    __u32 smem_len<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* Length of frame buffer mem */</span>    __u32 type<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* see FB_TYPE_**/</span>    __u32 type_aux<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* Interleave for interleaved Planes */</span>    __u32 visual<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* see FB_VISUAL_**/</span>     __u16 xpanstep<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* zero if no hardware panning  */</span>    __u16 ypanstep<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* zero if no hardware panning  */</span>    __u16 ywrapstep<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* zero if no hardware ywrap    */</span>    __u32 line_length<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* length of a line in bytes    */</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> mmio_start<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* Start of Memory Mapped I/O   */</span>                    <span class="token comment" spellcheck="true">/* (physical address) */</span>    __u32 mmio_len<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* Length of Memory Mapped I/O  */</span>    __u32 accel<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* Indicate to driver which*/</span>                    <span class="token comment" spellcheck="true">/*  specific chip/card we have*/</span>    __u16 capabilities<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* see FB_CAP_**/</span>    __u16 reserved<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* Reserved for future compatibility */</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//读取参数结构体</span><span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> FBIOGET_VSCREENINFO<span class="token punctuation">,</span> <span class="token operator">&amp;</span>fb_var<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> FBIOGET_FSCREENINFO<span class="token punctuation">,</span> <span class="token operator">&amp;</span>fb_fix<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="4、存储映射"><a href="#4、存储映射" class="headerlink" title="4、存储映射"></a>4、存储映射</h2><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/mman.h></span></span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">mmap</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>__addr<span class="token punctuation">,</span> size_t __len<span class="token punctuation">,</span> <span class="token keyword">int</span> __prot<span class="token punctuation">,</span>           <span class="token keyword">int</span> __flags<span class="token punctuation">,</span> <span class="token keyword">int</span> __fd<span class="token punctuation">,</span> __off_t __offset<span class="token punctuation">)</span> __THROW<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//地址自动分配，传入NULL，在存储映射中遇到一个问题，显示屏的line_length和显示宽度width不一样，显示屏line_length由硬件缓冲区大小决定，申请内存时，空间大小应该为line_length*height，而不是width*height</span>screen_base <span class="token operator">=</span> <span class="token function">mmap</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> screen_size<span class="token punctuation">,</span> PROT_WRITE<span class="token punctuation">,</span> MAP_SHARED<span class="token punctuation">,</span> fd<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//关闭存储映射</span><span class="token function">munmap</span><span class="token punctuation">(</span>screen_base<span class="token punctuation">,</span> screen_size<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="5、显示效果"><a href="#5、显示效果" class="headerlink" title="5、显示效果"></a>5、显示效果</h2><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//颜色标准转换</span><span class="token macro property">#<span class="token directive keyword">define</span> argb8888_to_rgb565(color) ({ \    unsigned int temp = (color);\    ((temp &amp; 0xF80000UL) >> 8) | \    ((temp &amp; 0xFC00UL) >> 5) | \    ((temp &amp; 0xF8UL) >> 3); \})</span></code></pre><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/8118a23003076a7df800a48e2338f7d.jpg" alt="8118a23003076a7df800a48e2338f7d"></p><h2 id="6、程序源码"><a href="#6、程序源码" class="headerlink" title="6、程序源码"></a>6、程序源码</h2><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;poll.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;linux/input.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/mman.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;linux/fb.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> argb8888_to_rgb565(color) ({ \    unsigned int temp = (color);\    ((temp &amp; 0xF80000UL) >> 8) | \    ((temp &amp; 0xFC00UL) >> 5) | \    ((temp &amp; 0xF8UL) >> 3); \})</span><span class="token keyword">static</span> <span class="token keyword">int</span> width<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">int</span> height<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token operator">*</span>screen_base <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 打点</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">lcd_draw_point</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> color<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> rgb565_color <span class="token operator">=</span> <span class="token function">argb8888_to_rgb565</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">>=</span>width<span class="token punctuation">)</span>        x <span class="token operator">=</span> width<span class="token number">-1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token operator">>=</span>height<span class="token punctuation">)</span>        y <span class="token operator">=</span> height<span class="token number">-1</span><span class="token punctuation">;</span>    screen_base<span class="token punctuation">[</span>y<span class="token operator">*</span>width <span class="token operator">+</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> rgb565_color<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 画线</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">lcd_draw_line</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> dir<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> length<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> color<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> rgb565_color <span class="token operator">=</span> <span class="token function">argb8888_to_rgb565</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> end<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> temp<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">>=</span>width<span class="token punctuation">)</span>        x <span class="token operator">=</span> width<span class="token number">-1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token operator">>=</span>height<span class="token punctuation">)</span>        y <span class="token operator">=</span> height<span class="token number">-1</span><span class="token punctuation">;</span>    temp <span class="token operator">=</span> y<span class="token operator">*</span>width <span class="token operator">+</span>x<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">{</span>        end <span class="token operator">=</span> x <span class="token operator">+</span> length <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>end<span class="token operator">>=</span>width<span class="token punctuation">)</span>            end <span class="token operator">=</span> width<span class="token number">-1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span> x<span class="token operator">&lt;=</span>end<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">,</span> temp<span class="token operator">++</span><span class="token punctuation">)</span>            screen_base<span class="token punctuation">[</span>temp<span class="token punctuation">]</span> <span class="token operator">=</span> rgb565_color<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        end <span class="token operator">=</span> y <span class="token operator">+</span> length <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>end<span class="token operator">>=</span>height<span class="token punctuation">)</span>            end <span class="token operator">=</span> height<span class="token number">-1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span> y<span class="token operator">&lt;</span>end<span class="token punctuation">;</span> y<span class="token operator">++</span><span class="token punctuation">,</span> temp<span class="token operator">+</span><span class="token operator">=</span>width<span class="token punctuation">)</span>            screen_base<span class="token punctuation">[</span>temp<span class="token punctuation">]</span> <span class="token operator">=</span> rgb565_color<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 画矩形</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">lcd_draw_rectangle</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> start_x<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> end_x<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> start_y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> end_y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> color<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> rgb565_color <span class="token operator">=</span> <span class="token function">argb8888_to_rgb565</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> x_len <span class="token operator">=</span> end_x <span class="token operator">-</span> start_x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> y_len <span class="token operator">=</span> end_y <span class="token operator">-</span> start_y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">lcd_draw_line</span><span class="token punctuation">(</span>start_x<span class="token punctuation">,</span> start_y<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> x_len<span class="token punctuation">,</span> color<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">lcd_draw_line</span><span class="token punctuation">(</span>start_x<span class="token punctuation">,</span> end_y<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> x_len<span class="token punctuation">,</span> color<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">lcd_draw_line</span><span class="token punctuation">(</span>start_x<span class="token punctuation">,</span> start_y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> y_len<span class="token punctuation">,</span> color<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">lcd_draw_line</span><span class="token punctuation">(</span>end_x<span class="token punctuation">,</span> start_y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> y_len<span class="token punctuation">,</span> color<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//区域填充</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">lcd_fill</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> start_x<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> end_x<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> start_y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> end_y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> color<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> rgb565_color <span class="token operator">=</span> <span class="token function">argb8888_to_rgb565</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> x_len <span class="token operator">=</span> end_x <span class="token operator">-</span> start_x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span> start_y<span class="token operator">&lt;=</span>end_y<span class="token punctuation">;</span> start_y<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">lcd_draw_line</span><span class="token punctuation">(</span>start_x<span class="token punctuation">,</span> start_y<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> x_len<span class="token punctuation">,</span> color<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> fb_fix_screeninfo fix_info<span class="token punctuation">;</span>    <span class="token keyword">struct</span> fb_var_screeninfo var_info<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> screen_size<span class="token punctuation">;</span>    <span class="token keyword">int</span> fd<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">!=</span> argc<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span><span class="token string">"usage:%s &lt;event>\n"</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">></span> <span class="token punctuation">(</span>fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>O_RDWR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"open error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">></span> <span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> FBIOGET_VSCREENINFO<span class="token punctuation">,</span> <span class="token operator">&amp;</span>var_info<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"ioctl error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">></span> <span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> FBIOGET_FSCREENINFO<span class="token punctuation">,</span> <span class="token operator">&amp;</span>fix_info<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"ioctl error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    screen_size <span class="token operator">=</span> fix_info<span class="token punctuation">.</span>line_length <span class="token operator">*</span> var_info<span class="token punctuation">.</span>yres<span class="token punctuation">;</span>    width <span class="token operator">=</span> var_info<span class="token punctuation">.</span>xres<span class="token punctuation">;</span>    height <span class="token operator">=</span> var_info<span class="token punctuation">.</span>yres<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"frame config x:%d, y:%d\n"</span><span class="token punctuation">,</span> var_info<span class="token punctuation">.</span>xres<span class="token punctuation">,</span> var_info<span class="token punctuation">.</span>yres<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"frame config size:%d\n"</span><span class="token punctuation">,</span> fix_info<span class="token punctuation">.</span>line_length<span class="token punctuation">)</span><span class="token punctuation">;</span>    screen_base <span class="token operator">=</span> <span class="token function">mmap</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> screen_size<span class="token punctuation">,</span> PROT_WRITE<span class="token punctuation">,</span> MAP_SHARED<span class="token punctuation">,</span> fd<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>MAP_FAILED <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>screen_base<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"mmap error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* 画正方形方块 */</span>    <span class="token keyword">int</span> w <span class="token operator">=</span> height <span class="token operator">*</span> <span class="token number">0.25</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//方块的宽度为 1/4 屏幕高度</span>    <span class="token function">lcd_fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> width<span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> height<span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">0x0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//清屏（屏幕显示黑色）</span>    <span class="token function">lcd_fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> w<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> w<span class="token punctuation">,</span> <span class="token number">0xFF0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//红色方块</span>    <span class="token function">lcd_fill</span><span class="token punctuation">(</span>width<span class="token operator">-</span>w<span class="token punctuation">,</span> width<span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> w<span class="token punctuation">,</span> <span class="token number">0xFF00</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//绿色方块</span>    <span class="token function">lcd_fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> w<span class="token punctuation">,</span> height<span class="token operator">-</span>w<span class="token punctuation">,</span> height<span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//蓝色方块</span>    <span class="token function">lcd_fill</span><span class="token punctuation">(</span>width<span class="token operator">-</span>w<span class="token punctuation">,</span> width<span class="token number">-1</span><span class="token punctuation">,</span> height<span class="token operator">-</span>w<span class="token punctuation">,</span> height<span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">0xFFFF00</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//黄色方块</span>    <span class="token comment" spellcheck="true">/* 画线: 十字交叉线 */</span>    <span class="token function">lcd_draw_line</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> height <span class="token operator">*</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> width<span class="token punctuation">,</span> <span class="token number">0xFFFFFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//白色线</span>    <span class="token function">lcd_draw_line</span><span class="token punctuation">(</span>width <span class="token operator">*</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> height<span class="token punctuation">,</span> <span class="token number">0xFFFFFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//白色线</span>    <span class="token comment" spellcheck="true">/* 画矩形 */</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> s_x<span class="token punctuation">,</span> s_y<span class="token punctuation">,</span> e_x<span class="token punctuation">,</span> e_y<span class="token punctuation">;</span>    s_x <span class="token operator">=</span> <span class="token number">0.25</span> <span class="token operator">*</span> width<span class="token punctuation">;</span>    s_y <span class="token operator">=</span> w<span class="token punctuation">;</span>    e_x <span class="token operator">=</span> width <span class="token operator">-</span> s_x<span class="token punctuation">;</span>    e_y <span class="token operator">=</span> height <span class="token operator">-</span> s_y<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token punctuation">;</span> <span class="token punctuation">(</span>s_x <span class="token operator">&lt;=</span> e_x<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>s_y <span class="token operator">&lt;=</span> e_y<span class="token punctuation">)</span><span class="token punctuation">;</span>    s_x<span class="token operator">+</span><span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> s_y<span class="token operator">+</span><span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> e_x<span class="token operator">-</span><span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> e_y<span class="token operator">-</span><span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token function">lcd_draw_rectangle</span><span class="token punctuation">(</span>s_x<span class="token punctuation">,</span> e_x<span class="token punctuation">,</span> s_y<span class="token punctuation">,</span> e_y<span class="token punctuation">,</span> <span class="token number">0xFFFFFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"frame draw over1\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">munmap</span><span class="token punctuation">(</span>screen_base<span class="token punctuation">,</span> screen_size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;FrameBuffer应用编程&quot;&gt;&lt;a href=&quot;#FrameBuffer应用编程&quot; class=&quot;headerlink&quot; title=&quot;FrameBuffer应用编程&quot;&gt;&lt;/a&gt;FrameBuffer应用编程&lt;/h1&gt;&lt;h2 id=&quot;1、内存映射&quot;&gt;&lt;a hr</summary>
      
    
    
    
    <category term="Linux嵌入式学习" scheme="https://actorjing.github.io/categories/Linux%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>2024-1-25红星路互勉</title>
    <link href="https://actorjing.github.io/2024/01/29/2024-1-25%E7%BA%A2%E6%98%9F%E8%B7%AF%E4%BA%92%E5%8B%89/"/>
    <id>https://actorjing.github.io/2024/01/29/2024-1-25%E7%BA%A2%E6%98%9F%E8%B7%AF%E4%BA%92%E5%8B%89/</id>
    <published>2024-01-29T07:21:49.000Z</published>
    <updated>2024-07-05T16:06:52.350Z</updated>
    
    <content type="html"><![CDATA[<p>2024.1.25记录第一次互勉约拍，地点在红星路，路人阿姨说小姐姐坐在那像幅画一样</p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240129152330.jpg" alt="微信图片_20240129152330"></p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240129152455.jpg" alt="微信图片_20240129152455"></p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240129152501.jpg" alt="微信图片_20240129152501"></p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240129152508.jpg" alt="微信图片_20240129152508"></p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240129152514.jpg" alt="微信图片_20240129152514"></p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240129152521.jpg" alt="微信图片_20240129152521"></p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240129152526.jpg" alt="微信图片_20240129152526"></p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240129152535.jpg" alt="微信图片_20240129152535"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;2024.1.25记录第一次互勉约拍，地点在红星路，路人阿姨说小姐姐坐在那像幅画一样&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/%E5%BE%AE%E4%BF%A1%E5%</summary>
      
    
    
    
    <category term="摄影日记" scheme="https://actorjing.github.io/categories/%E6%91%84%E5%BD%B1%E6%97%A5%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>2024-1-21城隍庙</title>
    <link href="https://actorjing.github.io/2024/01/21/2024-1-21%E5%9F%8E%E9%9A%8D%E5%BA%99/"/>
    <id>https://actorjing.github.io/2024/01/21/2024-1-21%E5%9F%8E%E9%9A%8D%E5%BA%99/</id>
    <published>2024-01-21T14:34:44.000Z</published>
    <updated>2024-07-05T16:06:57.211Z</updated>
    
    <content type="html"><![CDATA[<h3 id="城隍庙左咪咪右修勾"><a href="#城隍庙左咪咪右修勾" class="headerlink" title="城隍庙左咪咪右修勾"></a>城隍庙左咪咪右修勾</h3><hr><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_4726-1.jpg" alt="DSC_4726-1"></p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_4735-1.jpg" alt="DSC_4735-1"></p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_4678-1.jpg" alt="DSC_4678-1"></p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_4730-1.jpg" alt="DSC_4730-1"></p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_4669-1.jpg" alt="DSC_4669-1"></p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_4696-1.jpg" alt="DSC_4696-1"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;城隍庙左咪咪右修勾&quot;&gt;&lt;a href=&quot;#城隍庙左咪咪右修勾&quot; class=&quot;headerlink&quot; title=&quot;城隍庙左咪咪右修勾&quot;&gt;&lt;/a&gt;城隍庙左咪咪右修勾&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;http://wochaoaidahaide.oss-</summary>
      
    
    
    
    <category term="摄影日记" scheme="https://actorjing.github.io/categories/%E6%91%84%E5%BD%B1%E6%97%A5%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>FOC硬件日记（正在更新）</title>
    <link href="https://actorjing.github.io/2024/01/20/FOC%E7%A1%AC%E4%BB%B6%E6%97%A5%E8%AE%B0/"/>
    <id>https://actorjing.github.io/2024/01/20/FOC%E7%A1%AC%E4%BB%B6%E6%97%A5%E8%AE%B0/</id>
    <published>2024-01-20T15:33:48.000Z</published>
    <updated>2024-07-05T16:06:37.296Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-20"><a href="#1-20" class="headerlink" title="1.20"></a>1.20</h1><p>硬件设计，参考STC的无感BLDC方案，但是主控更换为STM32，三相逆变器采用FD6288Q，使用mos桥方式支持大电流（考虑小电流drv8313方案，只支持2A电流，仍然需要加mos驱动，考虑成本选择FD6288Q）。考虑加入电流环，电流检测采用INA199A1DCKR。下图为三相逆变电路及电流检测：</p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240120234842699.png" alt="image-20240120234842699"></p><p>存在验证的问题：</p><p>问题1：FD6288官方手册外围电路中需要增加自举电阻，参考开源方案并没有加入自举电阻，</p><p>问题2：电流检测放在半桥的下桥接地，理论上放在哪儿无影响</p><p>问题3：电流检测压差采用分压电阻得到1.65V，参考STM32F103C的FOC方案设计，C系列无VREF</p><hr><p>单片机选型使用STM32F103ZET6（理论上做6路FOC电机都没问题，大炮打蚊子），最初选型考虑STM32G和STM32F4系列，最终由于价格和学习基础理论，采用ZET6（主要因为手头有剩的）。单片机VREF采用3.3V，可能会出现精度问题，暂不考虑。电源设计如下：</p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240120235458613.png" alt="image-20240120235458613"></p><p>电路中5V仅作为FD6288Q芯片供电，为了电路简单，使用AMS1117（手头有剩的），MCU和其他电路的3.3V区分，分别使用两个RT9013稳压。完整电路还包括显示，串口，交互按键，暂未完成。</p><h1 id="1-22"><a href="#1-22" class="headerlink" title="1.22"></a>1.22</h1><p>参考柠檬FOC项目，又看到开源博主说FD6288的最低供电为12V，但是看芯片手册输入电压为4~24V，原STC无感电路设计采用5V，电机高速长时间运行时，ams1117处于温热状态，考虑更换为buck电路：</p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240122230156017.png" alt="image-20240122230156017"></p><p>FD6288Q仍然使用5V供电。</p><h1 id="1-24"><a href="#1-24" class="headerlink" title="1.24"></a>1.24</h1><p>完成原理图设计和PCB大致布局，完善USB串口，交互按键和LED指示灯。完整原理图如下：</p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240124210149669.png" alt="image-20240124210149669"></p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240124210213483.png" alt="image-20240124210213483"></p><p>电机接口考虑使用铜皮开窗，使用香蕉头和电机连接，或直接焊接。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-20&quot;&gt;&lt;a href=&quot;#1-20&quot; class=&quot;headerlink&quot; title=&quot;1.20&quot;&gt;&lt;/a&gt;1.20&lt;/h1&gt;&lt;p&gt;硬件设计，参考STC的无感BLDC方案，但是主控更换为STM32，三相逆变器采用FD6288Q，使用mos桥方式支持大电流（</summary>
      
    
    
    
    <category term="FOC学习" scheme="https://actorjing.github.io/categories/FOC%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux嵌入式4-tslib库函数</title>
    <link href="https://actorjing.github.io/2024/01/18/Linux%E5%B5%8C%E5%85%A5%E5%BC%8F4-tslib%E5%BA%93%E5%87%BD%E6%95%B0/"/>
    <id>https://actorjing.github.io/2024/01/18/Linux%E5%B5%8C%E5%85%A5%E5%BC%8F4-tslib%E5%BA%93%E5%87%BD%E6%95%B0/</id>
    <published>2024-01-18T13:53:01.000Z</published>
    <updated>2024-07-05T16:06:17.708Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、tslib简介"><a href="#1、tslib简介" class="headerlink" title="1、tslib简介"></a>1、tslib简介</h1><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240118215432029.png" alt="image-20240118215432029"></p><p>tslib是为触摸屏设备开发的linux应用层库函数，通过配置conf文件适配触摸屏信息，通过调用函数得到触摸屏的实时触摸点信息。tslib移植过程参考应用开发编程指南第18章。</p><h1 id="2、tslib库函数介绍"><a href="#2、tslib库函数介绍" class="headerlink" title="2、tslib库函数介绍"></a>2、tslib库函数介绍</h1><p>配置、打开触摸屏设备函数：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"tslib.h"</span></span><span class="token comment" spellcheck="true">/*dev_name: 设备节点nonblock： 0为阻塞方法打开触摸屏设备，非0表示非阻塞*/</span><span class="token keyword">struct</span> tsdev <span class="token operator">*</span><span class="token function">ts_open</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>dev_name<span class="token punctuation">,</span> <span class="token keyword">int</span> nonblock<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*参数与上面相同，区别是，dev_name可以设置为NULL，函数会在配置文件读取设备节点*/</span><span class="token keyword">struct</span> tsdev <span class="token operator">*</span><span class="token function">ts_setup</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>dev_name<span class="token punctuation">,</span> <span class="token keyword">int</span> nonblock<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//关闭触摸屏设备</span><span class="token keyword">int</span> <span class="token function">ts_close</span><span class="token punctuation">(</span><span class="token keyword">struct</span> tsdev <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//配置触摸屏设备</span><span class="token keyword">int</span> <span class="token function">ts_config</span><span class="token punctuation">(</span><span class="token keyword">struct</span> tsdev <span class="token operator">*</span>ts<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//获取触摸屏事件句柄    </span><span class="token function">ts_fd</span><span class="token punctuation">(</span>ts<span class="token punctuation">)</span></code></pre><hr><p>读取触摸屏数据函数：</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/**/</span><span class="token keyword">int</span> <span class="token function">ts_read</span><span class="token punctuation">(</span><span class="token keyword">struct</span> tsdev <span class="token operator">*</span>ts<span class="token punctuation">,</span> <span class="token keyword">struct</span> ts_sample <span class="token operator">*</span>samp<span class="token punctuation">,</span> <span class="token keyword">int</span> nr<span class="token punctuation">)</span><span class="token comment" spellcheck="true">/**/</span><span class="token keyword">int</span> <span class="token function">ts_read_mt</span><span class="token punctuation">(</span><span class="token keyword">struct</span> tsdev <span class="token operator">*</span>ts<span class="token punctuation">,</span> <span class="token keyword">struct</span> ts_sample_mt <span class="token operator">*</span><span class="token operator">*</span>samp<span class="token punctuation">,</span> <span class="token keyword">int</span> max_slots<span class="token punctuation">,</span> <span class="token keyword">int</span> nr<span class="token punctuation">)</span></code></pre><h1 id="3、tslib多点触摸测试："><a href="#3、tslib多点触摸测试：" class="headerlink" title="3、tslib多点触摸测试："></a>3、tslib多点触摸测试：</h1><p>tslib流程：</p><p>1、配置触摸屏</p><pre class=" language-c"><code class="language-c">ts <span class="token operator">=</span> <span class="token function">ts_setup</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>2、读取触摸屏信息，计算最大触摸点数，申请触摸点信息数组</p><pre class=" language-c"><code class="language-c"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">></span> <span class="token function">ioctl</span><span class="token punctuation">(</span><span class="token function">ts_fd</span><span class="token punctuation">(</span>ts<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">EVIOCGABS</span><span class="token punctuation">(</span>ABS_MT_SLOT<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>info<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"ioctl error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//获取最大触摸点</span>    max_slots <span class="token operator">=</span> info<span class="token punctuation">.</span>maximum <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">-</span> info<span class="token punctuation">.</span>minimum<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"max slots: %d\n"</span><span class="token punctuation">,</span>max_slots<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//申请存储触摸点数组空间</span>    samp <span class="token operator">=</span> <span class="token function">calloc</span><span class="token punctuation">(</span>max_slots<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> ts_sample_mt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>3、读取触摸屏数据</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//读触摸屏数据</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">></span><span class="token function">ts_read_mt</span><span class="token punctuation">(</span>ts<span class="token punctuation">,</span> <span class="token operator">&amp;</span>samp<span class="token punctuation">,</span> max_slots<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"ts_read error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ts_close</span><span class="token punctuation">(</span>ts<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>4、解算触摸屏坐标</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;poll.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;linux/input.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;tslib.h></span></span><span class="token comment" spellcheck="true">// 多点触摸实验</span><span class="token comment" spellcheck="true">// /dev/input/event1</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//tsdev是设备文件 tslib</span>    <span class="token keyword">struct</span> tsdev <span class="token operator">*</span>ts <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//sample是具体坐标信息</span>    <span class="token keyword">struct</span> ts_sample_mt <span class="token operator">*</span>samp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> input_absinfo info<span class="token punctuation">;</span>    <span class="token keyword">struct</span> ts_mt <span class="token operator">*</span>mt <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> max_slots<span class="token punctuation">;</span>        <span class="token keyword">int</span> pressure<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//配置触摸屏</span>    ts <span class="token operator">=</span> <span class="token function">ts_setup</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token operator">==</span>ts<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"ts_setup error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//ts_fd获取触摸屏事件句柄，再获取触摸屏信息</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">></span> <span class="token function">ioctl</span><span class="token punctuation">(</span><span class="token function">ts_fd</span><span class="token punctuation">(</span>ts<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">EVIOCGABS</span><span class="token punctuation">(</span>ABS_MT_SLOT<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>info<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"ioctl error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//获取最大触摸点</span>    max_slots <span class="token operator">=</span> info<span class="token punctuation">.</span>maximum <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">-</span> info<span class="token punctuation">.</span>minimum<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"max slots: %d\n"</span><span class="token punctuation">,</span>max_slots<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//申请存储触摸点数组空间</span>    samp <span class="token operator">=</span> <span class="token function">calloc</span><span class="token punctuation">(</span>max_slots<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> ts_sample_mt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//读触摸屏数据</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">></span><span class="token function">ts_read_mt</span><span class="token punctuation">(</span>ts<span class="token punctuation">,</span> <span class="token operator">&amp;</span>samp<span class="token punctuation">,</span> max_slots<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"ts_read error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">ts_close</span><span class="token punctuation">(</span>ts<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> max_slots<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//触摸点状态发生改变</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>samp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>valid<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//判断压力是否大于0 是表示按下 否表示松开</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>samp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>pressure<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//上一次压力为0表示刚按下 否则表示移动</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>pressure<span class="token punctuation">[</span>samp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>slot<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d按下：x=%d y=%d\n"</span><span class="token punctuation">,</span> samp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>slot<span class="token punctuation">,</span> samp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> samp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span><span class="token punctuation">{</span>                        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d移动：x=%d y=%d\n"</span><span class="token punctuation">,</span> samp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>slot<span class="token punctuation">,</span> samp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> samp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span><span class="token punctuation">{</span>                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d松开\n"</span><span class="token punctuation">,</span> samp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>slot<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//更新历史压力</span>            pressure<span class="token punctuation">[</span>samp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>slot<span class="token punctuation">]</span> <span class="token operator">=</span> samp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>pressure<span class="token punctuation">;</span>        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>        <span class="token function">ts_close</span><span class="token punctuation">(</span>ts<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>samp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1、tslib简介&quot;&gt;&lt;a href=&quot;#1、tslib简介&quot; class=&quot;headerlink&quot; title=&quot;1、tslib简介&quot;&gt;&lt;/a&gt;1、tslib简介&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://wochaoaidahaide.oss-cn-be</summary>
      
    
    
    
    <category term="Linux嵌入式学习" scheme="https://actorjing.github.io/categories/Linux%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
</feed>
